<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jean Bilheux</title>
    <link>/post/</link>
    <description>Recent content in Posts on Jean Bilheux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Mon, 01 Jan 2018 00:00:00 -0500</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to handle a list of int and improve its display</title>
      <link>/post/list_of_int_parser/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/list_of_int_parser/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In one of my project, I had to handle a list of runs and improve the way it was displayed.&lt;/p&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10,20,21,22,23,24,30,40,41,15,18
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should be displayed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10,15,18,20:24,30,40,41
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, if a user add new runs to the list, using a dropdown list on the side, the list will be updaded as followed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if a number is already in the list, it will be removed&lt;/li&gt;
&lt;li&gt;if a number is new to the list, it will just be added&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before showing you the code, here is how it works using a few examples&lt;/p&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;h3 id=&#34;example-1&#34;&gt;example 1&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from __code.utilities import ListRunsParser

o_parser = ListRunsParser(current_runs=&amp;quot;1,2,4:15&amp;quot;)
o_parser.list_current_runs
new_runs = [&#39;6&#39;,&#39;8&#39;, &#39;10&#39;]
o_parser.new_runs(list_runs=new_runs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the output will be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; 1,2,4,5,7,9,11:15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and if we provide new runs again&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;new_runs = [&#39;6&#39;,&#39;8&#39;, &#39;10&#39;]
o_parser.new_runs(list_runs=new_runs)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; 1,2,4:15
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-2&#34;&gt;example 2&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;o_parser = ListRunsParser(current_runs=&amp;quot;1,2,3,10&amp;quot;)
o_parser.list_current_runs
new_runs = [&#39;6&#39;]
o_parser.new_runs(list_runs=new_runs)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; 1:3,6,10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-3&#34;&gt;example 3&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;o_parser = ListRunsParser(current_runs=&amp;quot;&amp;quot;)
o_parser.list_current_runs
new_runs = [&#39;6&#39;,&#39;8&#39;,&#39;10&#39;,&#39;11&#39;,&#39;12&#39;]
o_parser.new_runs(list_runs=new_runs)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; 6,8,10:12
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;implementation&#34;&gt;Implementation&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
class ListRunsParser(object):
    &amp;quot;&amp;quot;&amp;quot;
    will clean up the current_list_of_runs with the new added runs
    ex: [1,2,3,4,7] -&amp;gt; 1:4,7
    if a new run is already in the list of runs, it will then be removed from the list
    ex: [1,2,3,4] with new run [1] -&amp;gt; 2:4
    &amp;quot;&amp;quot;&amp;quot;

    list_current_runs = []  # [&#39;1&#39;,&#39;10&#39;,&#39;2&#39;,&#39;30&#39;,&#39;4&#39;]
    int_list_current_runs = []  # [1, 2, 4, 10, 30]

    def __init__(self, current_runs=&#39;&#39;):
        if current_runs:
            self.make_discrete_list_of_runs(str_current_runs=current_runs)

    def make_discrete_list_of_runs(self, str_current_runs=&#39;&#39;):
        spans = (el.partition(&#39;:&#39;)[::2] for el in str_current_runs.split(&#39;,&#39;))
        ranges = (np.arange(int(s), int(e) + 1 if e else int(s) + 1)
                  for s, e in spans)
        all_nums = itertools.chain.from_iterable(ranges)
        _all_nums = set(all_nums)
        self.list_current_runs = [str(_run) for _run in _all_nums]

    def new_runs(self, list_runs=[]):
        &amp;quot;&amp;quot;&amp;quot;add new runs, remove already existing ones&amp;quot;&amp;quot;&amp;quot;

        # find list of runs to remove
        list_runs = set(list_runs)
        _list_runs_to_remove = set(list_runs.intersection(self.list_current_runs))

        # remove the runs from list_runs and list_current_runs
        clean_list_runs = list(list_runs - _list_runs_to_remove)
        clean_list_current_runs = list(set(self.list_current_runs) - \
                                       _list_runs_to_remove)

        new_list_current_runs = clean_list_runs + clean_list_current_runs
        self.list_current_runs = new_list_current_runs

        # go from string to int
        int_new_list_current_runs = [np.int(_run) for _run in new_list_current_runs]

        # sort them to prepare them for output format
        int_new_list_current_runs.sort()
        self.int_list_current_runs = int_new_list_current_runs

        if int_new_list_current_runs == []:
            self.str_list_current_runs = &amp;quot;&amp;quot;
            return

        # create output string format

        # only 1 run
        if len(int_new_list_current_runs) == 1:
            self.str_list_current_runs = str(int_new_list_current_runs[0])
            return

        # more than 1 run

        # create full matching list
        def match_list(reference_list=[], our_list=[]):
            _index = 0
            _ref_list_and_our_list = zip(our_list, reference_list)
            for _ref_run, _our_run in _ref_list_and_our_list:
                if _ref_run == _our_run:
                    _index += 1
                    continue
                break

            return _index

        _index = 0
        _groups = []
        _our_list = self.int_list_current_runs[_index: ]
        _list_full_reference = np.arange(_our_list[0], _our_list[-1]+1)

        print(&amp;quot;new list: {}&amp;quot;.format(_our_list))

        while _our_list:

            _ref_index = match_list(reference_list=_list_full_reference,
                                    our_list=_our_list)

            _group = [_our_list[0], _our_list[_ref_index-1]]
            # print(&amp;quot;_group: {}&amp;quot;.format(_group))
            _groups.append(_group)

            _our_list = _our_list[_ref_index:]
            if len(_our_list) == 1:
                _groups.append(_our_list)
                break

            if len(_our_list) == 0:
                break

            _list_full_reference = np.arange(_our_list[0], _our_list[-1]+1)

        print(&amp;quot;_groups: {}&amp;quot;.format(_groups))

        list_runs = []
        for _group in _groups:

            if len(_group) == 2:
                [_left_value, _right_value] = _group

                if _left_value == _right_value:
                    list_runs.append(str(_left_value))
                elif _right_value == (_left_value + 1):
                    list_runs.append(str(_left_value))
                    list_runs.append(str(_right_value))
                else:
                    list_runs.append(&amp;quot;{}:{}&amp;quot;.format(_left_value, _right_value))

            else:
                list_runs.append(str(_group[0]))

        str_runs = &amp;quot;,&amp;quot;.join(list_runs)
        print(str_runs)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to format the notebook widgets</title>
      <link>/post/how_to_format_widget_in_notebook/</link>
      <pubDate>Mon, 05 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/how_to_format_widget_in_notebook/</guid>
      <description>&lt;p&gt;When working with widgets inside a notebook, the default style looks like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/how_to_format_widget_in_notebook/default_style.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;In order to change its style, it&amp;rsquo;s possible to modify the CSS style sheet as followed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from IPython.core.display import HTML
HTML(&amp;quot;&amp;quot;&amp;quot;
&amp;lt;style&amp;gt;
.mytext &amp;gt; .widget-label {
    font-style: strong;
    color: black;
    font-size: 30px;
}
.mytext &amp;gt; input[type=&amp;quot;text&amp;quot;] {
    font-size: 20px;
    color: green;
}
&amp;lt;/style&amp;gt;
&amp;quot;&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this will give a new style as shown here&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/how_to_format_widget_in_notebook/customized_style.png&#39; /&gt;&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Thanks to Kynan for &lt;a href=&#34;https://stackoverflow.com/questions/32156248/how-do-i-set-custom-css-for-my-ipython-ihaskell-jupyter-notebook&#34; target=&#34;_blank&#34;&gt;the following post&lt;/a&gt;
 who helped me figuring out the solution&lt;/p&gt;

&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>How to create a movie from a stack of images</title>
      <link>/post/create_movie/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/create_movie/</guid>
      <description>

&lt;p&gt;This guide will show you how to create a simple movie (.avi) from a stack of images using ImageJ.&lt;/p&gt;

&lt;h3 id=&#34;step-1-go-to-the-ornl-cg1d-analysis-computer&#34;&gt;Step 1 - Go to the ORNL CG1D Analysis computer&lt;/h3&gt;

&lt;p&gt;This step is described in detail in our &lt;a href=&#39;https://neutronimaging.pages.ornl.gov/en/tutorial/how_to_access_computer/&#39;&gt;
Neutron Imaging Tutorial web page - Connect to our computer&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-2-start-imagej&#34;&gt;Step 2 - Start ImageJ&lt;/h3&gt;

&lt;p&gt;Navigate to the ImageJ program from the menu&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_movie/step1.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;and then click &lt;strong&gt;OK&lt;/strong&gt; to close the dialog box that pops up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_movie/step2.png&#39; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-3-load-images&#34;&gt;Step 3 - Load Images&lt;/h3&gt;

&lt;p&gt;Click ** File &amp;gt; Import  &amp;gt; Image Sequence &amp;hellip; **&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_movie/step3.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;folder&lt;/strong&gt; or just &lt;strong&gt;move to folder&lt;/strong&gt; and click &lt;strong&gt;Open&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_movie/step4_1.png&#39; /&gt;
&lt;img src=&#39;/img/posts/create_movie/step4_2.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;In the dialog box that shows up, select Use Virtual Stack then click &lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_movie/step5.png&#39; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-4-preview-images&#34;&gt;Step 4 - Preview Images&lt;/h3&gt;

&lt;p&gt;Feel free to slide through the images to make sure they are correctly sorted (as they are sorted by alphabeticall order).
If order is wrong, you will need to rename them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_movie/step6.png&#39; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-5-make-and-save-movie&#34;&gt;Step 5 - Make and Save Movie&lt;/h3&gt;

&lt;p&gt;Click **File &amp;gt; Save As &amp;gt; AVI &amp;hellip; ** to create the AVI file&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_movie/step7.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;Frame Rate (fps)&lt;/strong&gt; in the new dialog box, and click &lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_movie/step8.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;em&gt;where&lt;/em&gt; you want to create that file and &lt;em&gt;rename&lt;/em&gt; it if you don&amp;rsquo;t like the default output file name. Click &lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_movie/step9.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;A progress bar will display the status of the file creation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_movie/step10.png&#39; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to lock all the signals of a widget</title>
      <link>/post/pyqt_block_signals/</link>
      <pubDate>Fri, 12 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/pyqt_block_signals/</guid>
      <description>&lt;p&gt;I had to work on a project where the modification of any cell of a big table had to trigger an &lt;strong&gt;event&lt;/strong&gt;. But there were
cases where I had to repopulate the entire table. The problem of doing so is that each cell will then trigger the &lt;strong&gt;event&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The solution is very simple. All you need is to &lt;strong&gt;block all the signals&lt;/strong&gt; before updating the table (for example) and then
&lt;strong&gt;unlock the signals&lt;/strong&gt; once it&amp;rsquo;s done.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    from PyQt4 import QtGui
except ImportError:
    from PyQt5 import QtGui

...

# table_roi is the name of my ui
self.ui.table_roi.blockSignals(True)

# populate table

self.ui.table_roi.blockSignals(False)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_block_signals/screen1.png&#39; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automatically convert notebooks into html page for documentation using sphinx</title>
      <link>/post/convert_notebooks_to_html_pages/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/convert_notebooks_to_html_pages/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m going to show you here how you can easily create an HTML document from a notebook.&lt;/p&gt;

&lt;p&gt;1 - First thing you need is make sure your notebook has a title&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# this is my title
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, make sure that all the other headings of the notebooks have a lower hierarchy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/convert_notebooks_to_html_pages/screen1.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;2 - Then you will need to import the following python libraries&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; pip install sphinx
&amp;gt; pip install nbconvert
&amp;gt; pip install pandoc
&amp;gt; pip install latex
&amp;gt; pip install nbsphinx
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Somehow, I had to use conda for the &lt;strong&gt;pandoc&lt;/strong&gt; library to work.&lt;/p&gt;

&lt;/div&gt;


&lt;pre&gt;&lt;code&gt;&amp;gt; conda install pandoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 -  Move your notebooks into the source folder, next to the &lt;em&gt;index.rst&lt;/em&gt; file for example&lt;/p&gt;

&lt;p&gt;4 -  Modify the &lt;em&gt;index.rst&lt;/em&gt; by adding the name of the notebooks to display&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/convert_notebooks_to_html_pages/screen2.png&#39; /&gt;&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;This example is based on the &lt;a href=&#34;https://github.com/ornlneutronimaging/NeuNorm&#34; target=&#34;_blank&#34;&gt;NeuNorm&lt;/a&gt; project.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;5 - Let&amp;rsquo;s now modify the &lt;strong&gt;conf.py&lt;/strong&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extensions = [&#39;sphinx.ext.autodoc&#39;,
              &#39;nbsphinx&#39;,
              &#39;sphinx.ext.mathjax&#39;,
              &#39;sphinx.ext.githubpages&#39;,
              &#39;IPython.sphinxext.ipython_console_highlighting

...

source_suffix = [&#39;.rst&#39;, &#39;.ipynb&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6 - Everything we did so far now allows us to insert the notebook inside the documentation, but only locally. To
make it work via &lt;em&gt;ReadTheDocs&lt;/em&gt;, we need the next step describes here.&lt;/p&gt;

&lt;p&gt;Create a &lt;strong&gt;readthedocs.yml&lt;/strong&gt; file into our source tree&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# REad the Docs config

# python version
python:
  version: 3.5
  pip_install: True

# build a PDF
formats:
  - none

# use a conda environment file
conda:
  file: documentation/readthedocs-environment.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then, add another file called &lt;strong&gt;readthedocs-environments.yml&lt;/strong&gt; inside our documentation folder&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name: NeuNorm
channels:
  - conda-forge
dependencies:
  - python==3.5
  - pandoc
  - nbformat
  - jupyter_client
  - ipython
  - nbconvert
  - sphinx&amp;gt;=1.5.1
  - ipykernel
  - sphinx_rtd_theme
  - pip:
    - nbsphinx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7 - Let&amp;rsquo;s change the &lt;em&gt;Admin&lt;/em&gt; settings in ReadTheDocs as followed&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to &lt;strong&gt;Advanced Settings&lt;/strong&gt; of &lt;strong&gt;Admin&lt;/strong&gt; menu.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Specify the name of the python configuration file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;documentation/source/conf.py
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;and also the python interpreter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CPython 3.x
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;8 - Now, let&amp;rsquo;s build the documentation&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; python3 -m sphinx shource build
&amp;gt; make html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and here is the local documentation produced&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/convert_notebooks_to_html_pages/screen3.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;and here is the ReadTheDocs documentation created&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/convert_notebooks_to_html_pages/screen4.png&#39; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a Target type tool in matplotlib</title>
      <link>/post/target_tool_in_matplotlib/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/target_tool_in_matplotlib/</guid>
      <description>&lt;p&gt;In one of my project, I had to select, for various images, the best center of a circular object. I came up with the
following solution that, when used with the jupyter notebooks widgets, helps finding the best center of the object.&lt;/p&gt;

&lt;p&gt;Here is such an image where we need to find the center. In this case, it&amp;rsquo;s pretty obvious, but in real cases it&amp;rsquo;s much
more complicated so this tool should really help.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/target_tool_in_matplotlib/screen1.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the selection tool in action.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/target_tool_in_matplotlib/screen2.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;and here is the code used to generate this tool&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from matplotlib import collections as mc
import matplotlib.pyplot as plt
%matplotlib notebook

rom ipywidgets.widgets import interact
from ipywidgets import widgets

#working_data is a numpy array of your data
...

[height, width] = np.shape(working_data)

def select_center(x0, y0):

 fig, ax = plt.subplots()
 ax.imshow(working_data)

 min_mark_size = 10 #pixels

 #show center
 plt.axvline(x=x0)
 plt.axhline(y=y0)

 #show symetrical mark on (x0,y0) reference lines to help figure
 # out the right center
 nbr_x_ref_lines = 5
 nbr_y_ref_lines = 5

 # calculate the min distance between center and edges
 working_width = np.min([x0, width-x0])
 working_height = np.min([y0, height-y0])

 if working_width &amp;lt;= 4 * nbr_x_ref_lines:
   nbr_x_ref_lines = 1
 elif working_height &amp;lt;= 4 * nbr_y_ref_lines:
   nbr_y_ref_lines = 1

 #determine the reference lines coordinates
 x_interval = working_width / (nbr_x_ref_lines + 1)
 y_interval = working_height / (nbr_y_ref_lines + 1)

 references_lines = []

 #right of x0
 for i in np.arange(nbr_x_ref_lines):
   mark_size = (i+1) * min_mark_size
   point1 = (x0 + (i+1) * x_interval, y0 - mark_size)
   point2 = (x0 + (i+1) * x_interval, y0 + mark_size)
   references_lines.append([point1, point2])

 #left of x0
 for i in np.arange(nbr_x_ref_lines):
   mark_size = (i+1) * min_mark_size
   point1 = (x0 - (i+1) * x_interval, y0 - mark_size)
   point2 = (x0 - (i+1) * x_interval, y0 + mark_size)
   references_lines.append([point1, point2])

 #top of y0
 for j in np.arange(nbr_y_ref_lines):
 mark_size = (j+1) * min_mark_size
 point1 = (x0 - mark_size, y0 - (j+1) * y_interval)
 point2 = (x0 + mark_size, y0 - (j+1) * y_interval)
 references_lines.append([point1, point2])

 #bottom of y0
 for j in np.arange(nbr_y_ref_lines):
   mark_size = (j+1) * min_mark_size
   point1 = (x0 - mark_size, y0 + (j+1) * y_interval)
   point2 = (x0 + mark_size, y0 + (j+1) * y_interval)
   references_lines.append([point1, point2])

 #calculate list of colors
 basic_color = (1,0,0,1)
 list_color = [basic_color for x in np.arange(len(references_lines))]

 lc = mc.LineCollection(references_lines, colors=list_color, \
                        linewidths=2)
 ax.add_collection(lc)


preview = interact(select_center,
   x0 = widgets.IntSlider(min=0,
   max=width-1,
   value=np.int(width/2),
   description = &#39;x0&#39;),
   y0 = widgets.IntSlider(min=0,
   max=height-1,
   value=np.int(height/2),
   descrption= &#39;y0&#39;))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with PyQt applications</title>
      <link>/post/getting_started_with_pyqt_applications/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/getting_started_with_pyqt_applications/</guid>
      <description>

&lt;p&gt;Getting started with a PyQt application is alwawys intimidating. We always have a few important questions when starting such a
project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what tools do I need? PyQt, python, Qt Designer&amp;hellip;etc.&lt;/li&gt;
&lt;li&gt;how should I structure my project&lt;/li&gt;
&lt;li&gt;how to compile it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a step by step instructions that shows you how to get started. I&amp;rsquo;m not telling you this is the right way (if there
is any) or even the best way to do it, but I know this way works for me, so here it is.&lt;/p&gt;

&lt;h2 id=&#34;step-1-requirements&#34;&gt;Step 1 - Requirements&lt;/h2&gt;

&lt;p&gt;For this tutorial, you will need the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://download.qt.io/official_releases/qt/4.8/4.8.7/&#34; target=&#34;_blank&#34;&gt;Qt Designer&lt;/a&gt;. I&amp;rsquo;m using version 4.8.7 in this tutorial&lt;/li&gt;
&lt;li&gt;python 3.5 (I recommend the use of &lt;a href=&#34;https://www.anaconda.com/download/#macos&#34; target=&#34;_blank&#34;&gt;anaconda&lt;/a&gt; to install python and create
your own environment.&lt;/li&gt;
&lt;li&gt;pyqt. I&amp;rsquo;m using version 4.11.4 that I installed this way&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; conda install -c anaconda pyqt=4*
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-clone-the-base-empty-project&#34;&gt;Step 2 - Clone the Base Empty Project&lt;/h2&gt;

&lt;p&gt;To facilitate the work, I created a template repository that contains the base files you need to start such an application.
You will find this repository here (&lt;a href=&#34;https://github.com/JeanBilheux/PyQtGuiBase&#34; target=&#34;_blank&#34;&gt;PyQtGuiBase&lt;/a&gt;)&lt;/p&gt;

&lt;h4 id=&#34;what-you-will-find-in-this-repo&#34;&gt;What you will find in this repo&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;designer&lt;/strong&gt;: You will &amp;ldquo;draw&amp;rdquo; your Graphical User Interface (GUI) in the &lt;strong&gt;designer&lt;/strong&gt; folder.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mygui&lt;/strong&gt;, named after your project name, contains all the python code that brings to life all your widgets in your
application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scripts&lt;/strong&gt; is the point of entry of the application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other files are all typical of any python project, so nothing new here. Please refer to the python documentation if you
want to know more about those files.&lt;/p&gt;

&lt;h2 id=&#34;step-3-design-the-interface&#34;&gt;Step 3 - Design the Interface&lt;/h2&gt;

&lt;p&gt;First, let&amp;rsquo;s review what we are trying to achieve here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen1.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;A simple window with a button that allows the loading of an image. A text field that shows the path to the file you
selected and then a window that displays the image loaded.&lt;/p&gt;

&lt;p&gt;But before we can start enjoying this application, we need to design it.&lt;/p&gt;

&lt;p&gt;Start &lt;strong&gt;QtDesigner&lt;/strong&gt;, select &lt;strong&gt;Main Window&lt;/strong&gt; in the default welcome window, or click &lt;strong&gt;File &amp;gt; New &amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen2.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You are now facing a blank canvas&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen3.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;On the left side, you should see a list of widgets available in Qt.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen4.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Drag and drop&lt;/em&gt; a &lt;strong&gt;Push Button&lt;/strong&gt; and a &lt;strong&gt;Line Edit&lt;/strong&gt; into the canvas. Make sure the button is on the left side of the line
edit widget as shown here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen5.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;To nicely align those widgets, we gonna define an horizontal layout around those first widgets. Select the &lt;strong&gt;button&lt;/strong&gt; and the
&lt;strong&gt;line edit&lt;/strong&gt; and then &lt;em&gt;Right Click&lt;/em&gt;, select &lt;em&gt;Lay out &amp;gt; Lay Out Horizontally&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen6.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;In order to display the image loaded, we will need to have a widget that we will later &amp;ldquo;upgrade&amp;rdquo; into a matplotlib class.
&lt;em&gt;Drag and Drop&lt;/em&gt; a simple &lt;strong&gt;widget&lt;/strong&gt; into the canvas, just below our first 2 widgets you just aligned.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen7.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Right click&lt;/em&gt; the background of the Main Window and select a vertical layout.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen8.png&#39; /&gt;
&lt;img src=&#39;/img/posts/pyqt_applications/screen9.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;The top widgets are taking way too much space compare to the widget (future plot) at the bottom. Select the bottom
widget and in the &lt;strong&gt;property editor&lt;/strong&gt;, change the &lt;em&gt;vertical policy&lt;/em&gt; to &lt;em&gt;Expanding&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen10.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;and voila!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen11.png&#39; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-4-connecting-the-widgets-to-the-python-code&#34;&gt;Step 4 - Connecting the widgets to the python code&lt;/h2&gt;

&lt;p&gt;Right now the widgets can not do anyting as they are not connected to any event handler. Let&amp;rsquo;s now do that.&lt;/p&gt;

&lt;p&gt;But first, let&amp;rsquo;s rename our widgets to something that has more sense that the &lt;strong&gt;pushButton&lt;/strong&gt; and &lt;strong&gt;lineEdit&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can eithe click every widget and the use the &lt;strong&gt;Property Editor&lt;/strong&gt; to change their name, or you can use the &lt;strong&gt;Object Inspector&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen12.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Right Click&lt;/em&gt; on the &lt;strong&gt;LineEdit&lt;/strong&gt; and &lt;strong&gt;PushButton&lt;/strong&gt; objects and select &lt;em&gt;Change objectName&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen13.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Give the following new names to our widgets&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pushButton -&amp;gt; browse_button&lt;/li&gt;
&lt;li&gt;lineEdit -&amp;gt; tiff_file_name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen14.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s connect the button to a signal. We want to trigger a python function when the user clicks the button.&lt;/p&gt;

&lt;p&gt;There are several ways to do this. Let&amp;rsquo;s pick the easiest way for this tutorial. &lt;em&gt;Click&lt;/em&gt; the &lt;strong&gt;signal editor&lt;/strong&gt; button from the
&lt;strong&gt;widget box window&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen15.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;This allows you to select how the widget will behave. &lt;em&gt;Click and hold&lt;/em&gt; the &lt;strong&gt;browse_button&lt;/strong&gt; and &lt;em&gt;release&lt;/em&gt; the mouse when
you see the ground symbol.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen16.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Now, in the new window that just poped up, select &lt;strong&gt;clicked()&lt;/strong&gt; and then &lt;strong&gt;click&lt;/strong&gt; &lt;em&gt;edit&amp;hellip;&lt;/em&gt; to define the name of your
python function that will handle the click.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen17.png&#39; /&gt;
&lt;img src=&#39;/img/posts/pyqt_applications/screen18.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;call this function &lt;em&gt;browse_button_clicked()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then &lt;strong&gt;click OK&lt;/strong&gt; and, once you are back in the previous window, select the function you just created and click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen19.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, your button is alive. Does not do anything yet, but alive!&lt;/p&gt;

&lt;p&gt;Before leaving QtDesigner for good, one last cosmetic thing. Let&amp;rsquo;s change the label of the button to inform the user of
the meaning of this button.&lt;/p&gt;

&lt;p&gt;Make sure you switch back to &lt;strong&gt;Edit Widgets&lt;/strong&gt; mode&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen20.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Then double click the &lt;strong&gt;Push button&lt;/strong&gt; and type &amp;ldquo;&lt;em&gt;Browse&amp;hellip;&lt;/em&gt;&amp;ldquo;&lt;/p&gt;

&lt;p&gt;Last thing. Save your UI!&lt;/p&gt;

&lt;h2 id=&#34;step-5-compile-our-ui&#34;&gt;Step 5 - Compile our UI&lt;/h2&gt;

&lt;p&gt;Right now, if you take a look at the ui file you just saved via QtDesigner, it&amp;rsquo;s an XML that python can not use. Let&amp;rsquo;s fix that.&lt;/p&gt;

&lt;p&gt;Switching to a command line console (such as &lt;strong&gt;terminal&lt;/strong&gt; or &lt;strong&gt;iTerm&lt;/strong&gt; on Mac). The &lt;strong&gt;setup.py&lt;/strong&gt; file you found with this
project allows you to simply pass a &lt;em&gt;pyuic&lt;/em&gt; argument to make the compilation happenging.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python setup.py pyuic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because you are using the setup.py file I provide with the project, the command is very short. In reality it&amp;rsquo;s a little bit
more complex than that and looks like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pyuic4 ui/my_ui.ui -o designer/my_ui.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-6-python-code-at-last&#34;&gt;Step 6 - Python Code at Last&lt;/h2&gt;

&lt;p&gt;Using your favorite editor (emacs, vi, pyCharm, wingIDE&amp;hellip;.), let&amp;rsquo;s add the code that will bring our interface to life&lt;/p&gt;

&lt;p&gt;&lt;em&gt;scripts/myGUI&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

#myGui

import sys
import os

import PyQt4
import PyQt4.QtCore as QtCore
import PyQt4.QtGui as QtGui
from PyQt4.QtGui import QMainWindow as QMainWindow
from PyQt4.QtGui import QApplication

import mygui.interfaces.ui_mainWindow



class MainWindow(QMainWindow, mygui.interfaces.ui_mainWindow.Ui_MainWindow):

    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot; Initialization
        Parameters
        ----------
        &amp;quot;&amp;quot;&amp;quot;
        # Base class
        QMainWindow.__init__(self)

        # Initialize the UI widgets
        self.ui = mygui.interfaces.ui_mainWindow.Ui_MainWindow()
        self.ui.setupUi(self)


    def browse_button_clicked(self):
        pass

def main():
    app = QApplication(sys.argv)
    application = MainWindow()
    application.show()
    app.exec_()

if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you add your project to your python path&lt;/p&gt;

&lt;p&gt;example here for Mac&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PYTHONPATH=&amp;lt;full_path_to_root_of_your_project&amp;gt;;$PYTHONPATH
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-7-testing-your-application-for-the-first-time&#34;&gt;Step 7 - Testing your Application for the First Time&lt;/h2&gt;

&lt;p&gt;You can now test the application by running the main script&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; python scripts/myGUI
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen21.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Nothing exciting so far, but it&amp;rsquo;s alive!&lt;/p&gt;

&lt;h2 id=&#34;step-8-connecting-the-widgets&#34;&gt;Step 8 - Connecting the Widgets&lt;/h2&gt;

&lt;p&gt;Because I like to keep the main script as lean as possible, we are going to take care of loading the files in another
class, let&amp;rsquo;s call it &lt;strong&gt;FileHandler&lt;/strong&gt; in the &lt;em&gt;file_handler.py&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;Create a file &lt;em&gt;file_handler.py&lt;/em&gt; inside the &lt;strong&gt;mygui&lt;/strong&gt; folder and add the following code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#file_handler.py
from PyQt4.QtGui import QFileDialog
from PIL import Image


class FileHandler(object):

    data = []

    def __init__(self, parent=None):
        self.parent = parent

    def browse_tiff_file(self):


        file_name = str(QFileDialog.getOpenFileName(caption = &amp;quot;Select the TIFF file&amp;quot;,
                                                filter = &amp;quot;tiff (*.tif)&amp;quot;))

        if file_name:
            self.parent.ui.tiff_file_label.setText(file_name)
            self.load_image(file_name)
            self.display_image()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in order to use this class in the main script, import the class by adding the following line at the top of the &lt;strong&gt;myGUI&lt;/strong&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#myScript
from mygui.file_handler import FileHandler

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To simplify everyting, we are going to use the same &lt;em&gt;file_handler.py&lt;/em&gt; file to take care of loading the image. Update
the &lt;em&gt;file_handler.py&lt;/em&gt; file by adding the following lines&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#file_handler.py

from PyQt4.QtGui import QFileDialog
from PIL import Image


class FileHandler(object):

    data = []

    def __init__(self, parent=None):
        self.parent = parent

    def browse_tiff_file(self):


        file_name = str(QFileDialog.getOpenFileName(caption = &amp;quot;Select the TIFF file&amp;quot;,
                                                filter = &amp;quot;tiff (*.tif)&amp;quot;))

        if file_name:
            self.parent.ui.tiff_file_label.setText(file_name)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-9-plotting-the-image&#34;&gt;Step 9 - Plotting the Image&lt;/h2&gt;

&lt;p&gt;Final step is to display our image using matplotlib.&lt;/p&gt;

&lt;p&gt;First thing, let&amp;rsquo;s connect the &lt;em&gt;browse button&lt;/em&gt; to this script&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

#myGui

import sys
import os

import PyQt4
import PyQt4.QtCore as QtCore
import PyQt4.QtGui as QtGui
from PyQt4.QtGui import QMainWindow as QMainWindow
from PyQt4.QtGui import QApplication

import mygui.interfaces.ui_mainWindow

from mygui.file_handler import FileHandler


class MainWindow(QMainWindow, mygui.interfaces.ui_mainWindow.Ui_MainWindow):

    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot; Initialization
        Parameters
        ----------
        &amp;quot;&amp;quot;&amp;quot;
        # Base class
        QMainWindow.__init__(self)

        # Initialize the UI widgets
        self.ui = mygui.interfaces.ui_mainWindow.Ui_MainWindow()
        self.ui.setupUi(self)


    def browse_button_clicked(self):
        o_file_handler = FileHandler(parent = self)
        o_file_handler.browse_tiff_file()


def main():
    app = QApplication(sys.argv)
    #app.setWindowIcon(PyQt4.QtGui.QIcon(&amp;quot;:/icon.png&amp;quot;))
    application = MainWindow()
    application.show()
    app.exec_()

if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then, let&amp;rsquo;s bring the matplotlib to life by adding the following lines to the main script&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

#myGui

import sys
import os

import PyQt4
import PyQt4.QtCore as QtCore
import PyQt4.QtGui as QtGui
from PyQt4.QtGui import QMainWindow as QMainWindow
from PyQt4.QtGui import QApplication

from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure

import mygui.interfaces.ui_mainWindow
from mygui.file_handler import FileHandler


class MainWindow(QMainWindow, mygui.interfaces.ui_mainWindow.Ui_MainWindow):

    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot; Initialization
        Parameters
        ----------
        &amp;quot;&amp;quot;&amp;quot;
        # Base class
        QMainWindow.__init__(self)

        # Initialize the UI widgets
        self.ui = mygui.interfaces.ui_mainWindow.Ui_MainWindow()
        self.ui.setupUi(self)

        # init matplotlib
        self.figure = Figure()
        self.axes = self.figure.add_subplot(111)
        self.canvas = FigureCanvas(self.figure)
        self.toolbar = NavigationTollbar(self.canvas, self)

        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.canvas)
        layout.addWidget(self.toolbar)
        self.ui.widget.setLayout(layout)

    def browse_button_clicked(self):
        o_file_handler = FileHandler(parent = self)
        o_file_handler.browse_tiff_file()


def main():
    app = QApplication(sys.argv)
    application = MainWindow()
    application.show()
    app.exec_()

if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this program at this point, you should see an empty axis&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen22.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;The only thing left to do is to collect the data (array coming from the image) and show it in the canvas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#file_handler.py

from PyQt4.QtGui import QFileDialog
from PIL import Image


class FileHandler(object):

    data = []

    def __init__(self, parent=None):
        self.parent = parent

    def browse_tiff_file(self):


        file_name = str(QFileDialog.getOpenFileName(caption = &amp;quot;Select the TIFF file&amp;quot;,
                                                filter = &amp;quot;tiff (*.tif)&amp;quot;))

        if file_name:
            self.parent.ui.tiff_file_label.setText(file_name)
            self.load_image(file_name)
            self.display_image()

    def load_image(self, filename):
        data = Image.open(filename)
        self.data = data

    def display_image(self):
        self.parent.ui.widget.canvas.ax.imshow(self.data)
        self.parent.ui.widget.draw()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_applications/screen1.png&#39; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to create a DOI linked to any python library</title>
      <link>/post/create_doi/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/create_doi/</guid>
      <description>

&lt;p&gt;The best way to reference work done by others is by using their DOI (Digital Object Identifier). This is easy for
paper publication but not as easy for software, until now. Thanks to &lt;a href=&#34;https://zenodo.org/&#34; target=&#34;_blank&#34;&gt;zenodo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are the steps to create a DOI for your python library&lt;/p&gt;

&lt;h2 id=&#34;step-1-create-an-account-on-zenodo-https-zenodo-org&#34;&gt;Step 1 - Create an account on &lt;a href=&#34;https://zenodo.org/&#34; target=&#34;_blank&#34;&gt;zenodo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_doi/screen1.png&#39; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-2-link-your-application&#34;&gt;Step 2 - Link your application&lt;/h2&gt;

&lt;p&gt;In this example, I&amp;rsquo;m using my github account. By doing so, I am able to automatically see all my github repository by
clicking the &lt;strong&gt;GitHub&lt;/strong&gt; button in the menu, on the left side of the zenodo web page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_doi/screen2.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Then you can just turn On or Off the button next to your repository to make the connection&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_doi/screen3.png&#39; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-3-create-release-of-github-project&#34;&gt;Step 3 - Create release of GitHub project&lt;/h2&gt;

&lt;p&gt;Go back to your GitHub project and create a &lt;strong&gt;release&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_doi/screen4.png&#39; /&gt;
&lt;img src=&#39;/img/posts/create_doi/screen5.png&#39; /&gt;
&lt;img src=&#39;/img/posts/create_doi/screen6.png&#39; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-4-check&#34;&gt;Step 4 - Check&lt;/h2&gt;

&lt;p&gt;If you go back to the &lt;strong&gt;zenodo&lt;/strong&gt; web site, you should see the new DOI created for the release you juste made.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_doi/screen7.png&#39; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to create a python library using pip</title>
      <link>/post/create_python_library/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/create_python_library/</guid>
      <description>

&lt;p&gt;I have been working on a small project that allows to calculate the radial profile of an image for a given angular range.
We are not interested in this post about the functionality of the library itself, but in case you are curious, here
is where you can find the source code &lt;a href=&#34;https://github.com/JeanBilheux/SectorizedRadialProfile&#34; target=&#34;_blank&#34;&gt;SectorizedRadialProfile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I, first, ned to mention that the code is fully documented using &lt;a href=&#34;https://pypi.python.org/pypi/Sphinx&#34; target=&#34;_blank&#34;&gt;sphinx&lt;/a&gt; and fully
unit tested using &lt;a href=&#34;https://pypi.python.org/pypi/pytest&#34; target=&#34;_blank&#34;&gt;pytest&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I learned to create packages using the well documented [python packaging user guide[(&lt;a href=&#34;https://packaging.python.org/tutorials/distributing-packages/#requirements-for-packaging-and-distributing&#34; target=&#34;_blank&#34;&gt;https://packaging.python.org/tutorials/distributing-packages/#requirements-for-packaging-and-distributing&lt;/a&gt;),
but I still decided to make this short tutorial in order to quickly remind me the key points.&lt;/p&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;First you need to install &lt;strong&gt;twine&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; pip install twine
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuring-the-project&#34;&gt;configuring the project&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;setup.py&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a very important file. This is where you define the metadata of your project. For this project, here is my
&lt;em&gt;setup.py&lt;/em&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
from setuptools import setup, find_packages

setup(
    name = &amp;quot;sectorizedradialprofile&amp;quot;,
    version = &amp;quot;1.0.0&amp;quot;,
    author = &amp;quot;Jean Bilheux&amp;quot;,
    author_email = &amp;quot;bilheuxjm@ornl.gov&amp;quot;,
    packages = find_packages(exclude=[&#39;tests&#39;, &#39;notebooks&#39;]),
    include_package_data = True,
    test_suite = &#39;tests&#39;,
    install_requires = [
        &#39;numpy&#39;,
        &#39;pyfits&#39;,
        &#39;pillow&#39;,
    ],
    dependency_links = [
    ],
    description = &amp;quot;Radial profile of a given sector of an 2D array&amp;quot;,
    license = &#39;BSD&#39;,
    keywords = &amp;quot;tiff tif profile radial sector&amp;quot;,
    url = &amp;quot;https://github.com/JeanBilheux/SectorizedRadialProfile&amp;quot;,
    classifiers = [&#39;Development Status :: 3 - Alpha&#39;,
                   &#39;Topic :: Scientific/Engineering :: Physics&#39;,
                   &#39;Intended Audience :: Developers&#39;,
                   &#39;Programming Language :: Python :: 2.7&#39;,
                   &#39;Programming Language :: Python :: 3.5&#39;],
)

# End of file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;setup.cfg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This file contains the default option for &lt;em&gt;setup.py&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[bdist_wheel]
universal=1

[bdist]
formats=rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;README.rst&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is usually where the user will go first to learn how to use your library, so there is important.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_python_library/screen1.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MANIFEST.in&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is where you define the library needed by your package. In this project, I only needed &lt;em&gt;numpy&lt;/em&gt; but I still left
this empty, leaving it up to the user to install it on its own.&lt;/p&gt;

&lt;h2 id=&#34;packaging-the-project&#34;&gt;Packaging the project&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; python setup.py sdist
&amp;gt; python setup.py bdist_wheel --universal
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;upload-the-distribution&#34;&gt;Upload the distribution&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, we needt to get a &lt;a href=&#34;https://pypi.python.org/pypi?%3Aaction=register_form&#34; target=&#34;_blank&#34;&gt;PyPi user account&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We can then upload the distribution&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; twine upload dist/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_python_library/screen2.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;and voila !&lt;/p&gt;

&lt;p&gt;Your package is now available on PyPi and can be installed using pip&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; pip install sectorizedradialprofile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_python_library/screen3.png&#39; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;sum-up&#34;&gt;Sum up&lt;/h2&gt;

&lt;p&gt;To sumarize, and using a tag version this time&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; git tag X.Y.Z -m &amp;quot;Relase X.Y.Z.&amp;quot;
&amp;gt; git push --tags
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; pip install --upgrade twine wheel
&amp;gt; python setup.py sdist bdist_wheel --universal
&amp;gt; twine upload dist/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Thank you to &lt;a href=&#34;https://dbader.org/&#34; target=&#34;_blank&#34;&gt;Dan Bader&lt;/a&gt; for this final shortcut tip!)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use of local file in unit test</title>
      <link>/post/call_local_file_in_unit_test/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/call_local_file_in_unit_test/</guid>
      <description>&lt;p&gt;I had some issue in one of my project when running my unit test from the command line and from my IDE. I could never
have both happy at the same time. This was related to the way I was calling local file used in my unit tests.&lt;/p&gt;

&lt;p&gt;Using the command line, I had to refer to the file using relative path, but the IDE was looking for full path (which
is obviously wrong). Here is the trick to make both of them happy at the same time.&lt;/p&gt;

&lt;p&gt;Here is how my &lt;em&gt;tests&lt;/em&gt; folder is structured&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/call_local_file_in_unit_test/screen1.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;And here is where the magic happens. This is done in the &lt;strong&gt;setUp&lt;/strong&gt; method at the beginning of every unit test class that
will need to use those local files.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;experiment_test.py&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ExperimentTest(unittest.TestCase):

    def setUp(self):
        _file_path = os.path.dirname(__file__)
        self.data_path = os.path.abspath(os.path.join(_file_path, &#39;../../data&#39;))

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and here, this is how you use it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def test_experiment_calculate_lambda(self):
    _tof_file = os.path.join(self.data_path, &#39;tof.txt&#39;)
    _tof_obj = TOF(filename = _tof_file)
    ...
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to add a title to a matplotlib figure inside a notebook</title>
      <link>/post/how_to_add_title_to_matplotlib_figure/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/how_to_add_title_to_matplotlib_figure/</guid>
      <description>&lt;p&gt;By default, matplotlib only provides an increment index to the figure title as shown here&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_file_name = _files[index]
fig, (ax0, ax1) = plt.subplots(ncols=2, figsize=(10,5))

#plt.title(os.path.basename(_files[index]))
cax0 = ax0.imshow(_data[index], cmap=&#39;viridis&#39;, interpolation=None)
ax0.set_title(&amp;quot;Before Correction&amp;quot;)
_ = fig.colorbar(cax0, ax=ax0) # colorbar

cax1 = ax1.imshow(_clean_data[index], cmap=&#39;viridis&#39;, interpolation=None)
ax1.set_title(&amp;quot;After Correction&amp;quot;)
_ = fig.colorbar(cax1, ax=ax1) # colorbar

fig.tight_layout()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/how_to_add_title_to_matplolib_figure/screen1.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;In order to provide a title to this plot, simply add a value to the flag &lt;strong&gt;num&lt;/strong&gt; in &lt;strong&gt;plt.subplots&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_file_name = _files[index]
fig, (ax0, ax1) = plt.subplots(ncols=2, figsize=(10,5),
                               num=os.path.basename(_file_name))

#plt.title(os.path.basename(_files[index]))
cax0 = ax0.imshow(_data[index], cmap=&#39;viridis&#39;, interpolation=None)
ax0.set_title(&amp;quot;Before Correction&amp;quot;)
_ = fig.colorbar(cax0, ax=ax0) # colorbar

cax1 = ax1.imshow(_clean_data[index], cmap=&#39;viridis&#39;, interpolation=None)
ax1.set_title(&amp;quot;After Correction&amp;quot;)
_ = fig.colorbar(cax1, ax=ax1) # colorbar

fig.tight_layout()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/how_to_add_title_to_matplolib_figure/screen2.png&#39; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to remove a file from git tracking</title>
      <link>/post/remove_a_file_from_git_tracking/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/remove_a_file_from_git_tracking/</guid>
      <description>&lt;p&gt;Let’s suppose you have a file you have been updated for a while (ex: .idea/workspace.xml)&lt;br /&gt;
in your git repository but decided to remove it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You need to update your  &lt;em&gt;.gitignore&lt;/em&gt;  file and add this file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-buildoutcfg&#34;&gt;.idea/workspace.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remove all tracking files by cleaning the cached&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-buildoutcfg&#34;&gt;git rm -r –cached .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;commit changes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-buildoutcfg&#34;&gt;git add .

git commit -m “Here it is”

git push
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>How to trigger only 1 notebook widget dropdown event</title>
      <link>/post/how_to_trigger_single_notebook_widget_event/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/how_to_trigger_single_notebook_widget_event/</guid>
      <description>&lt;p&gt;I’m working on a notebook that is supposed to clean images. Nothing fancy here, just replacing the negative, &lt;strong&gt;inf&lt;/strong&gt;
and &lt;strong&gt;NaN&lt;/strong&gt; values by either &lt;strong&gt;0&lt;/strong&gt; or &lt;strong&gt;NaN&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This can be done interactively using the following widgets.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/how_to_trigger_single_notebook_widget_event/screenshot_1.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;But my problem is that each time a selection inside one of the dropdown widgets is changed, it triggers 5 events.
So I added the following snipet of code to cheat the system and only work with the first event triggered.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_files = _o_fix.list_files
data = _o_fix.data

counter = 0

def give_statistics(index):
 
 _file = os.path.basename(list_files[index])
 _data = data[index]

def on_change(change):
 global counter
 if counter == 0:
 _new_index = change[&#39;new&#39;][&#39;index&#39;]
 _list = change[&#39;owner&#39;].options
 print(&amp;quot;new value selected is {}&amp;quot;.format(_list[_new_index]))
 counter += 1
 elif counter == 4:
 counter = 0
 else:
 counter += 1
 
 stat = get_statistics_of_roi_cleaned(_data)
 
 number_of_pixels = stat.total_pixels
 negative_values = stat.nbr_negative
 negative_percentage = stat.percentage_negative
 infinite_values = stat.nbr_infinite
 infinite_percentage = stat.percentage_infinite
 nan_values = stat.nbr_nan
 nan_percentage = stat.percentage_nan
 
 box1 = widgets.HBox([widgets.Label(&amp;quot;File Name:&amp;quot;),
 widgets.Label(_file,
 layout=widgets.Layout(width=&#39;80%&#39;))])
 box2 = widgets.HBox([widgets.Label(&amp;quot;Total number of pixels:&amp;quot;,
 layout=widgets.Layout(width=&#39;15%&#39;)),
 widgets.Label(str(number_of_pixels))])
 
 box3 = widgets.HBox([widgets.Label(&amp;quot;Negative values:&amp;quot;,
 layout=widgets.Layout(width=&#39;10%&#39;)),
 widgets.Label(&amp;quot;{} pixels ({:.3}%)&amp;quot;.format(negative_values, negative_percentage),
 layout=widgets.Layout(width=&#39;15%&#39;)),
 widgets.Label(&amp;quot;to replace by&amp;quot;),
 widgets.Dropdown(options=[&#39;NaN&#39;, &#39;0&#39;],
 value=&#39;NaN&#39;)])
 neg_widgets = box3.children[3]
 neg_widgets.observe(on_change)
 
 box4 = widgets.HBox([widgets.Label(&amp;quot;Infinite values:&amp;quot;,
 layout=widgets.Layout(width=&#39;10%&#39;)),
 widgets.Label(&amp;quot;{} pixels ({:.3}%)&amp;quot;.format(infinite_values, infinite_percentage),
 layout=widgets.Layout(width=&#39;15%&#39;)),
 widgets.Label(&amp;quot;to replace by&amp;quot;),
 widgets.Dropdown(options=[&#39;NaN&#39;, &#39;0&#39;],
 value=&#39;NaN&#39;)])

box5 = widgets.HBox([widgets.Label(&amp;quot;NaN values:&amp;quot;,
 layout=widgets.Layout(width=&#39;10%&#39;)),
 widgets.Label(&amp;quot;{} pixels ({:.3}%)&amp;quot;.format(nan_values, nan_percentage),
 layout=widgets.Layout(width=&#39;15%&#39;)),
 widgets.Label(&amp;quot;to replace by&amp;quot;),
 widgets.Dropdown(options=[&#39;NaN&#39;, &#39;0&#39;],
 value=&#39;NaN&#39;)])


 vertical_box = widgets.VBox([box1, box2, box3, box4, box5])
 display(vertical_box)
 
 _result_inf = np.where(np.isinf(_data))
 _data[_result_inf] = np.NaN
 
 fig, [[ax0, ax1], [ax2, ax3]] = plt.subplots(ncols=2, nrows=2,
 figsize=(15, 10),
 num=os.path.basename(_file))

# plt.title(os.path.basename(_files[index]))
 cax0 = ax0.imshow(_data, cmap=&#39;viridis&#39;, interpolation=None)
 ax0.set_title(&amp;quot;Raw Image&amp;quot;)
 tmp1 = fig.colorbar(cax0, ax=ax0) # colorbar

ax1.hist(_data.ravel(), range=(np.nanmin(_data), np.nanmax(_data)), bins=256)
 ax1.set_title(&amp;quot;Raw Histogram&amp;quot;)

cax2 = ax2.imshow(_data, cmap=&#39;viridis&#39;, interpolation=None)
 ax2.set_title(&amp;quot;New Image&amp;quot;)
 tmp1 = fig.colorbar(cax2, ax=ax2) # colorbar

ax3.hist(_data.ravel(), range=(np.nanmin(_data), np.nanmax(_data)), bins=256)
 ax3.set_title(&amp;quot;New Histogram&amp;quot;)

fig.tight_layout()
 
 
tmp3 = widgets.interact(give_statistics,
 index=widgets.IntSlider(min=0,
 max=len(list_files) - 1,
 step=1,
 value=0,
 description=&#39;File Index&#39;,
 continuous_update=False),
 )

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code here shows how to connect the dropdown widget to an event and how to only handle the first event triggered.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to turn off warnings in the notebooks</title>
      <link>/post/how_to_remove_notebook_warning/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/how_to_remove_notebook_warning/</guid>
      <description>&lt;p&gt;If you are annoyed by warning messages (see top picture), Just add the following command at the top of your notebook&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import warnings
warnings.filterwarnings(‘ignore’)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/how_to_turn_off_notebook_warning/screen2.png&#39; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What my .gitignore file looks like</title>
      <link>/post/my_gitignore_file/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/my_gitignore_file/</guid>
      <description>&lt;p&gt;When working with notebooks and python projects, here is what my &lt;strong&gt;.gitignore&lt;/strong&gt; file looks like.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__pycache__

*.py[cod]

.ipynb*
.coverage
/cover/*

# mac
.DS_Store

.cache

# Packages
*.egg
*.egg-info
dist
build
eggs
parts
bin
var
sdist
MANIFEST

# Unit test / coverage reports
.coverage
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
