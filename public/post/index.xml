<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jean Bilheux</title>
    <link>/post/</link>
    <description>Recent content in Posts on Jean Bilheux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Mon, 01 Jan 2018 00:00:00 -0500</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Add an icon inside a QLabel using Qt resource</title>
      <link>/post/how_to_add_icon_in_qlabel/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/how_to_add_icon_in_qlabel/</guid>
      <description>

&lt;p&gt;There are many ways to add images or icons on top of buttons or label. Usually the most painful part is
 locating the file in the program and managing the location of those images. Qt comes with a &lt;strong&gt;resource&lt;/strong&gt; tool
 that facilitates this storage. The way I&amp;rsquo;m doing it may look strange (and redundant sometimes)
 but at least it works for me so I will stick to it, until I see a better way.&lt;/p&gt;

&lt;h2 id=&#34;design-your-icon&#34;&gt;Design your icon&lt;/h2&gt;

&lt;p&gt;Because I&amp;rsquo;m lazy, usually I find them on google images and simply resize them. It is important to
 use a png (not jpeg) as png as a transparent background layer (jpeg does not). For this example I decided
 to work with the following image found on the web.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/how_to_add_icon_in_qlabel/search_icon_original.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;This icon is obviously too big. I use &lt;strong&gt;photoshop&lt;/strong&gt; to resize it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;open image in photoshop&lt;/li&gt;
&lt;li&gt;click **image/image size&lt;/li&gt;
&lt;li&gt;specify pixels as units&lt;/li&gt;
&lt;li&gt;enter new width (height will follow). You typically want something around 20 pixels wide.&lt;/li&gt;
&lt;li&gt;save new image&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/how_to_add_icon_in_qlabel/how_to_resize_image.gif&#39; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;bring-icon-in-application&#34;&gt;Bring icon in application&lt;/h2&gt;

&lt;p&gt;The following step should be possible directly from QtDesigner (using **resource browser) but found out that
I always end up having to do it manually anyway.&lt;/p&gt;

&lt;h3 id=&#34;copy-icon-in-icons-folder&#34;&gt;Copy icon in &lt;strong&gt;icons&lt;/strong&gt; folder&lt;/h3&gt;

&lt;p&gt;If you do not have this folder, create it at the root of your project. This folder should contain a
&lt;strong&gt;icons.qrc&lt;/strong&gt; file that looks like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;RCC&amp;gt;
    &amp;lt;qresource prefix=&amp;quot;MPL Toolbar&amp;quot;&amp;gt;
        &amp;lt;file&amp;gt;search_icon.png&amp;lt;/file&amp;gt;
        &amp;lt;file&amp;gt;clear_icon.png&amp;lt;/file&amp;gt;
        &amp;lt;file&amp;gt;splitter_icon.png&amp;lt;/file&amp;gt;
        &amp;lt;file&amp;gt;go-home.png&amp;lt;/file&amp;gt;
        &amp;lt;file&amp;gt;zoom-previous.png&amp;lt;/file&amp;gt;
        ...
    &amp;lt;/qresource&amp;gt;
&amp;lt;/RCC&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;You need to edit manually this file and add the new icon (&lt;file&gt;search_icon.png&lt;/file&gt; in this case).&lt;/li&gt;
&lt;li&gt;then copy your icon in this folder&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;building-the-icons-rc-py-file&#34;&gt;Building the icons_rc.py file&lt;/h3&gt;

&lt;p&gt;This file is necessary to be able to use the icons in the program. Simply type the following command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pyrcc4 ./icon.qrc -o addie/icons_rc.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;addie&lt;/em&gt; being the subfolder containing all the python code (name of the project).&lt;/p&gt;

&lt;h3 id=&#34;load-the-image&#34;&gt;Load the image&lt;/h3&gt;

&lt;p&gt;We should now be able to use the image in our code.&lt;/p&gt;

&lt;p&gt;I usually load all my images in a &lt;strong&gt;init_widgets.py&lt;/strong&gt; method called just after bringing the ui to the screen.
If we consider a label called &lt;strong&gt;label_1&lt;/strong&gt;, then here is the call to bring the image to the screen&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;...
self.ui.label_1.setPixmap(QtGui.QPixmap(&amp;quot;:/MPL Toolbar/search_icon.png&amp;quot;))
...
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;in case you are working with a QPushButton instead of a QLabel, here is the way to do the same thing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.ui.button_1.setIcon(QtGui.QIcon(&amp;quot;:/MPL Toolbar/search_icon.png&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and here is what the application will look like !&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/how_to_add_icon_in_qlabel/application_preview.png&#39; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python logging module 1.0.1</title>
      <link>/post/python_logging/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/python_logging/</guid>
      <description>

&lt;p&gt;This tutorial is a short version of the following &lt;a href=&#34;https://realpython.com/python-logging/&#34; target=&#34;_blank&#34;&gt;full tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;quick-demo&#34;&gt;Quick Demo&lt;/h2&gt;

&lt;p&gt;First, we need to import the library to be able to use it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to use it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging

logging.debug(&#39;This is a debug message&#39;)
logging.info(&#39;This is an info message&#39;)
logging.warning(&#39;This is a warning message&#39;)
logging.error(&#39;This is an error message&#39;)
logging.critical(&#39;This is a critical message&#39;)

def test_me():
    logging.debug(&#39;This is a debug message&#39;)
    logging.info(&#39;This is an info message&#39;)
    logging.warning(&#39;This is a warning message&#39;)
    logging.error(&#39;This is an error message&#39;)
    logging.critical(&#39;This is a critical message&#39;)

if __name__ == &amp;quot;__main__&amp;quot;:
    test_me()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of this program will be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WARNING:root:This is a warning message
ERROR:root:This is an error message
CRITICAL:root:This is a critical message
WARNING:root:This is a warning message
ERROR:root:This is an error message
CRITICAL:root:This is a critical message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, the logging module logs only everything that is WARNING level or higher. But it&amp;rsquo;s possible to change
this by playing with the &lt;strong&gt;basicConfig&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;basic-configurations&#34;&gt;Basic Configurations&lt;/h2&gt;

&lt;p&gt;Here are some of the main features of the configurations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;level&lt;/strong&gt;: The root logger will be set to the specified severity level.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filename&lt;/strong&gt;: This specifies the file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filemode&lt;/strong&gt;: If filename is given, the file is opened in this mode. The default is a, which means append.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;format&lt;/strong&gt;: This is the format of the log message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;To now log everything at or above DEBUG&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt; import logging

 logging.basicConfig(level=logging.DEBUG) 
 logging.debug(&amp;quot;This will get logged now&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;output will be&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; DEBUG:root:This will get logged now
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;### logging into a file&lt;/p&gt;

&lt;p&gt;If we want to log everything in a file instead of just in the terminal&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging

logging.basicConfig(filename=&#39;/Users/j35/Desktop/app.log&#39;, filemode=&#39;w&#39;, format=&#39;%(name)s - %(levelname)s - %(message)s&#39;)
logging.warning(&amp;quot;This will get logged to a file&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the code I used to test it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging

def try_me():
    logging.debug(&#39;This is a debug message&#39;)
    logging.info(&#39;This is an info message&#39;)
    logging.warning(&#39;This is a warning message&#39;)
    logging.error(&#39;This is an error message&#39;)
    logging.critical(&#39;This is a critical message&#39;)

if __name__ == &amp;quot;__main__&amp;quot;:

    logging.basicConfig(filename=&#39;/Users/j35/Desktop/app.cfg&#39;,
                        filemode=&#39;w&#39;,
                        format=&#39;%(name)s - %(levelname)s - %(message)s&#39;)
    logging.warning(&amp;quot;This should go to a file&amp;quot;)
    
    try_me()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and here is the &lt;em&gt;app.cfg&lt;/em&gt; file created&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;root - WARNING - This should go to a file
root - WARNING - This is a warning message
root - ERROR - This is an error message
root - CRITICAL - This is a critical message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get a full list of all the parameters that can be set, go &lt;a href=&#34;https://docs.python.org/3/library/logging.html#logging.basicConfig&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-personalize-the-output&#34;&gt;How to personalize the output&lt;/h2&gt;

&lt;p&gt;To get a full list of all the parameters we can simply retrieve and display in the message, go &lt;a href=&#34;https://docs.python.org/3/library/logging.html#logrecord-attributes&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But here is an example of what we can do using those parameters&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging

logging.basicConfig(format=&#39;%(process)d-%(levelname)s-%(message)s&#39;)
logging.warning(&#39;This is a Warning&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this will produce the following output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;18472-WARNING-This is a Warning
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we add the date and time&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging

logging.basicConfig(format=&#39;%(asctime)s - %(message)s&#39;, level=logging.INFO)
logging.info(&#39;Admin logged in&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;2018-07-11 20:12:06,288 - Admin logged in
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;logging-our-own-data&#34;&gt;Logging our own data&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging
name = &#39;John&#39;
logging.error(&#39;%s raised an error&#39;, name)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ERROR:root:John raised an error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or even better using the new python 3.6 format&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging
name = &#39;John&#39;
logging.error(f&#39;{name} raised an error&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;capturing-exceptions&#34;&gt;Capturing Exceptions&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s also possible to capture the entire stack trace by turning on the &lt;strong&gt;exc_info&lt;/strong&gt; flag as shown here&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging

a = 5
b = 0

try:
  c = a / b
except Exception as e:
  logging.error(&amp;quot;Exception occurred&amp;quot;, exc_info=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ERROR:root:Exception occurred
Traceback (most recent call last):
  File &amp;quot;exceptions.py&amp;quot;, line 6, in &amp;lt;module&amp;gt;
    c = a / b
ZeroDivisionError: division by zero
[Finished in 0.2s]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also use this, &lt;strong&gt;if we call it from inside an exception handler&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging

a = 5
b = 0
try:
  c = a / b
except Exception as e:
  logging.exception(&amp;quot;Exception occurred&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this will produce te same output.&lt;/p&gt;

&lt;h2 id=&#34;classes-and-functions&#34;&gt;Classes and functions&lt;/h2&gt;

&lt;p&gt;In a real project, we should define our own &lt;strong&gt;logger&lt;/strong&gt; by creating an object of the logger class.&lt;/p&gt;

&lt;p&gt;Unlike the root logger, a custom logger will not display by default the name of the logger&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging
logger = logging.getLogger(&#39;example_logger&#39;)
logger.warning(&#39;This is a warning&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which produces the following output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;This is a warning
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WARNING&lt;/p&gt;

&lt;p&gt;unlike the root logger, a custom logger can not be configured using &lt;strong&gt;basicConfig()&lt;/strong&gt;, instead we need to use &lt;strong&gt;Handlers&lt;/strong&gt;
and &lt;strong&gt;Formatters&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;using-handlers&#34;&gt;Using Handlers&lt;/h3&gt;

&lt;p&gt;Handlers are required when we want to configure our own logger and for example, sent the various messages (error, warnings, &amp;hellip;)
to different outputs (screen, http, file, &amp;hellip;).&lt;/p&gt;

&lt;p&gt;Example: Let&amp;rsquo;s create a logger that record everything with level WARNING and above to the screen, but everything with
level ERROR should also be saved to a file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# logging_example.py

import logging

# Create a custom logger
logger = logging.getLogger(__name__)

# Create handlers
c_handler = logging.StreamHandler()
f_handler = logging.FileHandler(&#39;file.log&#39;)
c_handler.setLevel(logging.WARNING)
f_handler.setLevel(logging.ERROR)

# Create formatters and add it to handlers
c_format = logging.Formatter(&#39;%(name)s - %(levelname)s - %(message)s&#39;)
f_format = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)
c_handler.setFormatter(c_format)
f_handler.setFormatter(f_format)

# Add handlers to the logger
logger.addHandler(c_handler)
logger.addHandler(f_handler)

logger.warning(&#39;This is a warning&#39;)
logger.error(&#39;This is an error&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and that produce the following output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;__main__ - WARNING - This is a warning
__main__ - ERROR - This is an error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and create a file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# file.log
2018-08-03 16:12:21,723 - __main__ - ERROR - This is an error
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;other-configuration-methods&#34;&gt;Other Configuration Methods&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s also possible to configure our logger using a &lt;strong&gt;config file&lt;/strong&gt; (or a
dictionary) and loading it using &lt;em&gt;fileConfig()&lt;/em&gt; (or &lt;em&gt;dictConfig()&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Example of a config file called &lt;em&gt;file.conf&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[loggers]
keys=root,sampleLogger

[handlers]
keys=consoleHandler

[formatters]
keys=sampleFormatter

[logger_root]
level=DEBUG
handlers=consoleHandler

[logger_sampleLogger]
level=DEBUG
handlers=consoleHandler
qualname=sampleLogger
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=sampleFormatter
args=(sys.stdout,)

[formatter_sampleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, there are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 2 loggers
* 1 handler
* 1 formatter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thye are configured by adding the word logger, handler and formatter
before their name (with underscore)&lt;/p&gt;

&lt;p&gt;example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- logger_root
- handler_consoleHandler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the code that allow to load this configuration of the logger&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging
import logging.config

logging.config.fileConfig(fname=&#39;file.conf&#39;, disable_existing_loggers=False)

# Get the logger specified in the file
logger = logging.getLogger(__name__)

logger.debug(&#39;This is a debug message&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the output it will produce&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;2018-07-13 13:57:45,467 - __main__ - DEBUG - This is a debug message
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Multi rows table (QTableWidget)and Qtree interacting together</title>
      <link>/post/table_tree_prototype/</link>
      <pubDate>Tue, 06 Nov 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/table_tree_prototype/</guid>
      <description>&lt;p&gt;For one of my projects, I needed to answer the following requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;table with 3 rows of labels (each row of label is a submenu of the row above)&lt;/li&gt;
&lt;li&gt;resizing any of the column will resize accordingly the other rows&lt;/li&gt;
&lt;li&gt;scroll of any of the label rows will scroll the other labels&lt;/li&gt;
&lt;li&gt;tree on the size will allow to hide/show any of the column&lt;/li&gt;
&lt;li&gt;hidding any of the tree should automatically hide the leaves under it&lt;/li&gt;
&lt;li&gt;if hidding all the leaves of a branch, automatically hide the branch parent&lt;/li&gt;
&lt;li&gt;user should have the option to save and reload a configuration&lt;/li&gt;
&lt;li&gt;full reset of table is available&lt;/li&gt;
&lt;li&gt;user can remove configurations he created&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Because QTableWidget does not allow several rows of label, I had to built this feature from scratch.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This project is available on our python notebooks repository (&lt;a href=&#34;https://github.com/neutronimaging/python_notebooks&#34; target=&#34;_blank&#34;&gt;https://github.com/neutronimaging/python_notebooks&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Once installed (with dependencies), start the &lt;strong&gt;addie.py&lt;/strong&gt; notebook and run the cells.&lt;/p&gt;

&lt;p&gt;Here is the program in action&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/addie_table/addie_table_prototype.gif&#39; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Right Click Menu in QTable</title>
      <link>/post/right_click_menu_in_pyqt_table/</link>
      <pubDate>Thu, 01 Nov 2018 00:00:00 -0400</pubDate>
      
      <guid>/post/right_click_menu_in_pyqt_table/</guid>
      <description>

&lt;p&gt;How to get a &lt;strong&gt;right click menu&lt;/strong&gt; from a QTable in PyQt&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_qmenu/final_menu.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;To be able to have a right click menu in a QTable (PyQt), you need to follow the following few steps&lt;/p&gt;

&lt;h3 id=&#34;turn-on-custom-context-menu&#34;&gt;Turn on Custom Context Menu&lt;/h3&gt;

&lt;p&gt;In QtDesigner, and in the &lt;strong&gt;property editor&lt;/strong&gt; select in the &lt;strong&gt;contextMenuPolicy&lt;/strong&gt; the option &lt;strong&gt;CustomContextMenu&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_qmenu/qtdesigner_setup_1.png&#39; /&gt;
&lt;img src=&#39;/img/posts/pyqt_qmenu/qtdesigner_setup_2.png&#39; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;connect-custom-context-menu-signal&#34;&gt;Connect Custom Context Menu Signal&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqt_qmenu/signal_editor.png&#39; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;catch-signal-in-main-code&#34;&gt;Catch Signal in Main Code&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;...
    def h3_table_right_click(self, position):
         o_h3_table = H3TableHandler(parent=self)
         o_h3_table.right_click()

...

class H3TableHandler:

    def __init__(self, parent=None):
        self.parent = parent

    def right_click(self):
        #bar = self.parent.menuBar()
        top_menu = QMenu(self.parent)

        menu = top_menu.addMenu(&amp;quot;Menu&amp;quot;)
        config = menu.addMenu(&amp;quot;Configuration ...&amp;quot;)

        _load = config.addAction(&amp;quot;&amp;amp;Load ...&amp;quot;)
        _save = config.addAction(&amp;quot;&amp;amp;Save ...&amp;quot;)

        config.addSeparator()

        config1 = config.addAction(&amp;quot;Config1&amp;quot;)
        config2 = config.addAction(&amp;quot;Config2&amp;quot;)
        config3 = config.addAction(&amp;quot;Config3&amp;quot;)

        action = menu.exec_(QtGui.QCursor.pos())

        if action == _load:
            # do this
            pass
        elif action == _save:
            # do this
            pass
        elif action == config1:
            # do this
            pass
        elif action == config2:
            # do this
            pass
        elif action == config3:
            # do this
            pass
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python Tricks</title>
      <link>/post/python_tricks/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>/post/python_tricks/</guid>
      <description>

&lt;h2 id=&#34;locate-absolute-home-folder-on-all-os&#34;&gt;Locate absolute home folder on all OS&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from os.path import expanduser
print(expanduser(&amp;quot;~&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;On Windows&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;C:\\Users\\j35`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;On Mac&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;/Users/j35&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to automatically plural words in Python</title>
      <link>/post/inflect_python_library/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>/post/inflect_python_library/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;inflect&lt;/strong&gt; correctly generate plurals, singular nouns, ordinals, indefinite articles; convert numbers to words.parameters&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;This library can be installed via &lt;strong&gt;pip&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; pip install inflect 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the full documentation of this library can be found &lt;a href=&#34;https://pypi.org/project/inflect/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-does-it-work&#34;&gt;How Does it Work?&lt;/h2&gt;

&lt;p&gt;When do we need this tool&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;You want to see {} variable&amp;quot;.format(user_variable))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No matter the value of user_variable, the output will always be something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;You want to see X variable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Problem here!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using now this new library&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import inflect
p = inflect.engine()
print(&amp;quot;You want to see {}.format(user_variable) + p.plura(&amp;quot;variable&amp;quot;, user_variable)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if user_variable is 1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;You want to see 1 variable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but if user_variable is 3 for exam ple&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;You want to see 3 variables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NB: I used this library for the first time in the notebook &lt;em&gt;metadata_ascii_parser.ipynb&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Launching PyQt from script</title>
      <link>/post/start_pyqt_ui_from_script_itself/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>/post/start_pyqt_ui_from_script_itself/</guid>
      <description>&lt;p&gt;I designed the very simple following UI using QtDesigner and called it &lt;strong&gt;main_window.ui&lt;/strong&gt;. I placed it in the
&lt;strong&gt;ui_template&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/start_pyqt_ui_from_script_itself/main_ui.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Here is what the structure of my project looks like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/start_pyqt_ui_from_script_itself/tree_structure.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;I have my own script that buitl automatically the python version of the template&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;setup.py&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os


class UiBuilder(object):
    pyuic = &#39;&#39;

    def __init__(self, ui_name=&#39;&#39;):
        self.define_pyuic_to_run()
        self.ui_name = os.path.abspath(&#39;ui_template/&#39; + ui_name)
        [base, ext] = os.path.splitext(ui_name)
        py_name = base + &#39;.py&#39;
        self.py_name = os.path.abspath(&#39;ui/&#39; + py_name)

        # run command
        print(self.pyuic + &#39; &#39; + self.ui_name + &#39; -o &#39; + self.py_name)
        os.system(self.pyuic + &#39; &#39; + self.ui_name + &#39; -o &#39; + self.py_name)

    def define_pyuic_to_run(self):
        try:
            from PyQt4 import QtGui
            self.pyuic = &#39;pyuic4&#39;
        except:
            from PyQt5 import QtGui
            self.pyuic = &#39;pyuic5&#39;


if __name__ == &amp;quot;__main__&amp;quot;:
    o_builder = UiBuilder(ui_name=&#39;main_window.ui&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to run it, simply do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; python setup.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now import and use the interface in our main script, called here &lt;strong&gt;main.py&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys

try:
    from PyQt4.QtGui import QFileDialog
    from PyQt4 import QtCore, QtGui
    from PyQt4.QtGui import QMainWindow
except ImportError:
    from PyQt5.QtWidgets import QFileDialog
    from PyQt5 import QtCore, QtGui
    from PyQt5.QtWidgets import QApplication, QMainWindow

from ui.main_window  import Ui_MainWindow as UiMainWindow


class Interface(QMainWindow):

    def __init__(self, parent=None):

        QMainWindow.__init__(self, parent=parent)
        self.ui = UiMainWindow()
        self.ui.setupUi(self)
        self.setWindowTitle(&amp;quot;Anton&#39;s MCP Detector Efficiency Correction UI&amp;quot;)


if __name__ == &amp;quot;__main__&amp;quot;:
    app = QApplication(sys.argv)
    o_interface = Interface()
    o_interface.show()
    sys.exit(app.exec_())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to start the application&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; python main.py
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How python Class properties work</title>
      <link>/post/python_class_properties/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 -0400</pubDate>
      
      <guid>/post/python_class_properties/</guid>
      <description>&lt;p&gt;Using this &lt;a href=&#34;https://pybit.es/property-decorator.html&#34; target=&#34;_blank&#34;&gt;tutorial&lt;/a&gt; I came up with this post that summarize what I need
to remember about &lt;strong&gt;python classes properties&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Class Properties are very useful in the way that they can check automatically the format of a parameter passed in can
customize, or calculate on the fly, a parameter requested.&lt;/p&gt;

&lt;p&gt;Here I define a first parent class&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class FlyingHours:

    def __init__(self, owner, starting_hours=0):
        self.owner = owner.title()  # first character is upper case
        self.starting_hours = starting_hours
        self._total_hours = starting_hours

    def __str__(self):
        s = [&amp;quot;{} of {}&amp;quot;.format(__class__.__name__, self.owner),
             &amp;quot;Total Hours: {}&amp;quot;.format(self._total_hours),
            ]
        return &#39;\n\n&#39;.join(s)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; o_plane = FlyingHours(&amp;quot;jean bilheux&amp;quot;, &amp;quot;bob&amp;quot;)
&amp;gt; print(o_plane)
FlyingHours of Jean Bilheux

Total Hours: bob
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in a child class, I introduce the getter and setter of the &lt;strong&gt;starting hours&lt;/strong&gt; parameter&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class FlyingHours1(FlyingHours):

    def __init__(self, owner, starting_hours=0):
        super().__init__(owner, starting_hours=starting_hours)

    @property
    def starting_hours(self):
        return self._starting_hours

    @starting_hours.setter
    def starting_hours(self, hours):
        if not isinstance(hours, int):
            raise TypeError(&amp;quot;must be a int&amp;quot;)
        if hours &amp;lt;= 0:
            raise ValueError(&amp;quot;must be greater than 0!&amp;quot;)
        self._starting_hours = hours

    @starting_hours.deleter
    def starting_hours(self):
        raise AttributeError(&amp;quot;Cannot reset hours!&amp;quot;)

    @property
    def hours(self):
        return &amp;quot;You have been flying {}&amp;quot;.format(self._starting_hours)

    def _add_hours(self, hours):
        self._total_hours += hours

    def __iadd__(self, hours):
        &#39;Magic method to allow for acc += amount&#39;
        self._add_hours(hours)
        return self  # need to return object!

    def __isub__(self, hours):
        &#39;Magic method to allow for acc -= amount&#39;
        self._add_hours(-hours)
        return self
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this code, the &lt;strong&gt;starting hours&lt;/strong&gt; are automatically checked when passed in (even during initialization)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; o_plane = FlyingHours1(&amp;quot;jean bilheux&amp;quot;, starting_hours=&amp;quot;zero hours&amp;quot;)
&amp;gt; print(o_plane)
...
&amp;lt;ipython-input-3-d84930155a49&amp;gt; in starting_hours(self, hours)
     11     def starting_hours(self, hours):
     12         if not isinstance(hours, int):
---&amp;gt; 13             raise TypeError(&amp;quot;must be a int&amp;quot;)
     14         if hours &amp;lt;= 0:
     15             raise ValueError(&amp;quot;must be greater than 0!&amp;quot;)

TypeError: must be a int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can retrieve &lt;strong&gt;starting hours&lt;/strong&gt; using the getter&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt; o_plane.starting_hours
10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you can also define your own output using your customize getter&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt; o_plane.hours
&#39;You have been flying 10&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other cool features (not related to properties) but to &lt;strong&gt;refactoring and computation&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt; o_plane += 10
&amp;gt; print(o_plane)
FlyingHours of Jean Bilheux

Total Hours: 20

&amp;gt; o_plane += 20
&amp;gt; print(o_plane)
FlyingHours of Jean Bilheux

Total Hours: 35
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notebook tutorial can be found in &lt;a href=&#34;https://github.com/JeanBilheux/python_101/blob/master/python_thinking/properties_class.ipynb&#34; target=&#34;_blank&#34;&gt;python_101&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to customize QPushButton Icons</title>
      <link>/post/icon_qpushbutton/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 -0400</pubDate>
      
      <guid>/post/icon_qpushbutton/</guid>
      <description>

&lt;p&gt;For one of my project I had to display a customized push button. I found a couple of ways to do this.&lt;/p&gt;

&lt;p&gt;The goal is to display the following icon inside a QPushButton.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/icon_qpushbutton/button_rotation_left.png&#39; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;using-qtgui-qicon&#34;&gt;Using QtGui.QIcon&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s pretend our image is at &lt;em&gt;/Users/j35/Desktop/button_rotation_left.png&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_icon = QtGui.QIcon(&amp;quot;/Users/j35/Desktop/button_rotation_left.png&amp;quot;)
my_button = QtGui.QPushButton()
my_button.setIcon(_icon)
my_button.setIconSize(QtCore.QSize(50, 300))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/icon_qpushbutton/button_method1.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;The problem of using this way, is that the button looses its &lt;strong&gt;push button&lt;/strong&gt; feature that changes the look of the
button when the user click it.&lt;/p&gt;

&lt;h2 id=&#34;using-stylesheet&#34;&gt;Using StyleSheet&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_button = QtGui.QPushButton()
my_button.setStyleSheet(&amp;quot;background-image: url(&#39;/Users/j35/Desktop/button_rotation_left.png&#39;); background-repeat: no-repeat&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/icon_qpushbutton/button_method2.png&#39; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;source&#34;&gt;Source&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/36714078/pyqt4-how-to-make-icon-bigger-than-qpushbutton-pixmap-buttons&#34; target=&#34;_blank&#34;&gt;stackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pyqt.sourceforge.net/Docs/PyQt4/qicon.html&#34; target=&#34;_blank&#34;&gt;QIcon documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.qt.io/archives/qt-4.8/stylesheet-examples.html&#34; target=&#34;_blank&#34;&gt;StyleSheet examples with QPushButton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gamma Filtering</title>
      <link>/post/gamma_filtering_method/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/gamma_filtering_method/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;When working with neutorn imaging files, one of the first thing we need to do is removing the gamma spots. Those
spots are pixel that recorded gammas strikes, not neutrons strikes.&lt;/p&gt;

&lt;p&gt;To do so, we are going to use the &lt;strong&gt;convolve&lt;/strong&gt; library from &lt;strong&gt;scipy&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;initialize-fake-data-set&#34;&gt;Initialize Fake Data Set&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
from scipy.ndimage import convolve

# let&#39;s create a 10x10 random array of values between 0 and 1
my_array = np.random.rand(10, 10)

# let&#39;s fake a couple of gammas at [5, 5] and [7, 7]
my_array[5, 5] = 10
my_array[7, 7] = 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/gamma_filtering/before_cleaning.png&#39; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;cleaning&#34;&gt;Cleaning&lt;/h1&gt;

&lt;p&gt;The principle is that we will look for all the pixels for which a fraction of their value (coefficient that can
 be set) is still above the mean of the entire image. We will then replace those high counts pixels by the average value
of all the pixels surrounding that pixel.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# threshold coefficient
coefficient = 0.1

mean_value = np.mean(my_array)
indexes = np.where( coefficient * my_array &amp;gt; mean_value)

mean_kernel = np.array([[1, 1, 1], [1, 0, 1], [1, 1, 1]]) / 8.0
convolved_data = convolve(my_array, mean_kernel, mode=&#39;constant&#39;)

cleaned_array = my_array.copy()
cleaned_array[indexes] = convolved_data[indexes]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/gamma_filtering/after_cleaning.png&#39; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to create a python library using conda</title>
      <link>/post/create_conda_python_library/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/create_conda_python_library/</guid>
      <description>&lt;p&gt;The goal of this post will be show you the minimum requirements to build a conda library.&lt;/p&gt;

&lt;p&gt;The starting project will be a library I have been working on called &lt;a href=&#34;https://github.com/scikit-beam/NeuNorm&#34; target=&#34;_blank&#34;&gt;NeuNorm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First thing, create a folder &lt;strong&gt;conda-recipes&lt;/strong&gt; that will contain the files necessary to build the library.&lt;/p&gt;

&lt;p&gt;In this folder, I created 2 files&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;conda_build_config.yaml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python:
  - 2.7
  - 3.5
  - 3.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;meta.yaml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% set version = &amp;quot;1.3.16&amp;quot; %}
{% set git_rev = &amp;quot;1.3.16&amp;quot; %}

package:
  name: neunorm
  version: {{ version }}

source:
  git_rev: {{ git_rev }}
  git_url: https://github.com/scikit-beam/NeuNorm

build:
  number: 0
  script: python setup.py install --single-version-externally-managed --record record.txt
#  noarch: python

requirements:
  build:
    - python {{ python }}
    - setuptools
  run:
    - python
    - pillow
    - numpy
    - scipy
    - pathlib
    - astropy

test:
  imports:
    - NeuNorm

about:
  home: https://github.com/scikit-beam/NeuNorm
  license: BSD 3-Clause
  summary: Neutron imaging normalization tool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each new release, make sure you change the top version number.&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s build it by first going into that folder &lt;strong&gt;conda-recipes&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cd conda-recipes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;conda build .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;In order to upload your library to conda, you need to create an account in &lt;a href=&#34;https://anaconda.org/conda-forge&#34; target=&#34;_blank&#34;&gt;Anaconda cloud&lt;/a&gt;.
In my case, I also created a &lt;strong&gt;organization&lt;/strong&gt; called &lt;strong&gt;neutronimaging&lt;/strong&gt;. I will use that &lt;em&gt;channel&lt;/em&gt; to upload my library.
&lt;img src=&#39;/img/posts/create_conda_python_library/anaconda_cloud_group.png&#39; /&gt;&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;You simply need to follow the direction given by anaconda&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;anaconda upload /users/j35/anaconda/conda-bld/osx-64/neunorm-1.3.16-py* -u neutronimaging&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Voila !&lt;/p&gt;

&lt;p&gt;You will find your library in the anaconda cloud web site&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/create_conda_python_library/neunorm_library.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;The instructions here are for the simplest case. For more complicated build, check &lt;a href=&#34;https://conda.io/docs/user-guide/tutorials/build-pkgs.html&#34; target=&#34;_blank&#34;&gt;the anaconda documentation&lt;/a&gt;
or the following tutorial by &lt;a href=&#34;https://github.com/wigging/python-package&#34; target=&#34;_blank&#34;&gt;Gavin Wiggins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Big thanks to Jiao Lin for showing me how to do it, step by step.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keep Pan and Zoom of ImageView When Displaying New Image</title>
      <link>/post/pyqtgraph_states/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/pyqtgraph_states/</guid>
      <description>

&lt;p&gt;The ImageViewer of pyqtgraph is amazing but comes with an annoying feature, the reset of the &lt;strong&gt;pan&lt;/strong&gt; and &lt;strong&gt;zoom&lt;/strong&gt;
if you display a new image (as shown here)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqtgraph_states/before_saving_states.gif&#39; /&gt;&lt;/p&gt;

&lt;p&gt;A couple of lines of codes need to be added in order to preserve those settings when switching image. Looks like
nothing but it took me a couple of hours to figure it out so here it is with code before and after&lt;/p&gt;

&lt;h3 id=&#34;definition-of-imageview&#34;&gt;Definition of ImageView&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def init_pyqtgraph(self):
        ...
        area = DockArea()
        area.setVisible(True)
        d1 = Dock(&amp;quot;Sample Image&amp;quot;, size=(200, 300))
        d2 = Dock(&amp;quot;Profile&amp;quot;, size=(200, 100))
        d3 = Dock(&amp;quot;Water Intake&amp;quot;, size=(200, 400))

        area.addDock(d1, &#39;top&#39;)
        area.addDock(d2, &#39;bottom&#39;)
        area.addDock(d3, &#39;right&#39;)

        # image view
        self.ui.image_view = pg.ImageView(view=pg.PlotItem())

        self.ui.image_view.ui.menuBtn.hide()
        self.ui.image_view.ui.roiBtn.hide()
        ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then the part about the display of the images&lt;/p&gt;

&lt;h3 id=&#34;before&#34;&gt;Before&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
    def refresh_image(self):
        first_update = False
        if self.histogram_level == []:
            first_update = True
        _histo_widget = self.ui.image_view.getHistogramWidget()
        self.histogram_level = _histo_widget.getLevels()

        index_selected = self.ui.file_index_slider.value()
        _image = self.dict_data[&#39;list_data&#39;][index_selected-1]
        _image = np.transpose(_image)
        _image = self._clean_image(_image)
        _image = self._force_range(_image)
        self.current_image = _image
        self.ui.image_view.setImage(_image)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;after&#34;&gt;After&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def refresh_image(self):

        _view = self.ui.image_view.getView()
        _view_box = _view.getViewBox()
        _state = _view_box.getState()

        first_update = False
        if self.histogram_level == []:
            first_update = True
        _histo_widget = self.ui.image_view.getHistogramWidget()
        self.histogram_level = _histo_widget.getLevels()

        index_selected = self.ui.file_index_slider.value()
        _image = self.dict_data[&#39;list_data&#39;][index_selected-1]
        _image = np.transpose(_image)
        _image = self._clean_image(_image)
        _image = self._force_range(_image)
        self.current_image = _image
        self.ui.image_view.setImage(_image)
        _view_box.setState(_state)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows to get the following behavior&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqtgraph_states/pyqtgraph_save_state.gif&#39; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with the histogram widget of pyqtgraph</title>
      <link>/post/pyqtgraph_histogram/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/pyqtgraph_histogram/</guid>
      <description>&lt;p&gt;The histogram tool on the side of the image coming for free with pyqtgraph is amazing. You can change or move the
range but any refresh of the image reset the settings defined. Here is how you can fix those settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqtgraph_histogram/histogram_showing_issue.gif&#39; /&gt;&lt;/p&gt;

&lt;p&gt;My main challenge has been to recover the &lt;strong&gt;id&lt;/strong&gt; of the histogram when not initializing this one myself. And here is
the way&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
class MyPyqt(QMainWindow):

    histogram_level = []

    def __init__(self):
        self.init_pyqtgraph()

    def init_pyqtgraph(self):

        # image view
        self.ui.image_view = pg.ImageView()
        self.ui.image_view.ui.menuBtn.hide()
        self.ui.image_view.ui.roiBtn.hide()

        ...


    def refresh_image(self):

        first_update = False
        if self.histogram_level == []:
            first_update = True

        _histo_widget = self.ui.image_view.getHistogramWidget()
        self.histogram_level = _histo_widget.getLevels()

        # retrieve image data to display
        index_selected = self.ui.file_index_slider.value()
        _image = self.dict_data[&#39;list_data&#39;][index_selected-1]
        _image = np.transpose(_image)
        _image = self._clean_image(_image)
        _image = self._force_range(_image)
        self.current_image = _image
        self.ui.image_view.setImage(_image)

        if not first_update:
            _histo_widget.setLevels(self.histogram_level[0], self.histogram_level[1])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/pyqtgraph_histogram/histogram_fixed.gif&#39; /&gt;&lt;/p&gt;

&lt;p&gt;You can find the full documentation of the histogram feature by going to the pyqtgraph documentation web page&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pyqtgraph.org/documentation/graphicsItems/histogramlutitem.html&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#39;/img/posts/pyqtgraph_histogram/histo_doc.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to handle a list of int and improve its display</title>
      <link>/post/list_of_int_parser/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/list_of_int_parser/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In one of my project, I had to handle a list of runs and improve the way it was displayed.&lt;/p&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10,20,21,22,23,24,30,40,41,15,18
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should be displayed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10,15,18,20:24,30,40,41
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, if a user add new runs to the list, using a dropdown list on the side, the list will be updaded as followed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if a number is already in the list, it will be removed&lt;/li&gt;
&lt;li&gt;if a number is new to the list, it will just be added&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before showing you the code, here is how it works using a few examples&lt;/p&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;h3 id=&#34;example-1&#34;&gt;example 1&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from __code.utilities import ListRunsParser

o_parser = ListRunsParser(current_runs=&amp;quot;1,2,4:15&amp;quot;)
o_parser.list_current_runs
new_runs = [&#39;6&#39;,&#39;8&#39;, &#39;10&#39;]
o_parser.new_runs(list_runs=new_runs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the output will be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; 1,2,4,5,7,9,11:15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and if we provide new runs again&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;new_runs = [&#39;6&#39;,&#39;8&#39;, &#39;10&#39;]
o_parser.new_runs(list_runs=new_runs)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; 1,2,4:15
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-2&#34;&gt;example 2&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;o_parser = ListRunsParser(current_runs=&amp;quot;1,2,3,10&amp;quot;)
o_parser.list_current_runs
new_runs = [&#39;6&#39;]
o_parser.new_runs(list_runs=new_runs)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; 1:3,6,10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-3&#34;&gt;example 3&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;o_parser = ListRunsParser(current_runs=&amp;quot;&amp;quot;)
o_parser.list_current_runs
new_runs = [&#39;6&#39;,&#39;8&#39;,&#39;10&#39;,&#39;11&#39;,&#39;12&#39;]
o_parser.new_runs(list_runs=new_runs)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; 6,8,10:12
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;implementation&#34;&gt;Implementation&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
class ListRunsParser(object):
    &amp;quot;&amp;quot;&amp;quot;
    will clean up the current_list_of_runs with the new added runs
    ex: [1,2,3,4,7] -&amp;gt; 1:4,7
    if a new run is already in the list of runs, it will then be removed from the list
    ex: [1,2,3,4] with new run [1] -&amp;gt; 2:4
    &amp;quot;&amp;quot;&amp;quot;

    list_current_runs = []  # [&#39;1&#39;,&#39;10&#39;,&#39;2&#39;,&#39;30&#39;,&#39;4&#39;]
    int_list_current_runs = []  # [1, 2, 4, 10, 30]

    def __init__(self, current_runs=&#39;&#39;):
        if current_runs:
            self.make_discrete_list_of_runs(str_current_runs=current_runs)

    def make_discrete_list_of_runs(self, str_current_runs=&#39;&#39;):
        spans = (el.partition(&#39;:&#39;)[::2] for el in str_current_runs.split(&#39;,&#39;))
        ranges = (np.arange(int(s), int(e) + 1 if e else int(s) + 1)
                  for s, e in spans)
        all_nums = itertools.chain.from_iterable(ranges)
        _all_nums = set(all_nums)
        self.list_current_runs = [str(_run) for _run in _all_nums]

    def new_runs(self, list_runs=[]):
        &amp;quot;&amp;quot;&amp;quot;add new runs, remove already existing ones&amp;quot;&amp;quot;&amp;quot;

        # find list of runs to remove
        list_runs = set(list_runs)
        _list_runs_to_remove = set(list_runs.intersection(self.list_current_runs))

        # remove the runs from list_runs and list_current_runs
        clean_list_runs = list(list_runs - _list_runs_to_remove)
        clean_list_current_runs = list(set(self.list_current_runs) - \
                                       _list_runs_to_remove)

        new_list_current_runs = clean_list_runs + clean_list_current_runs
        self.list_current_runs = new_list_current_runs

        # go from string to int
        int_new_list_current_runs = [np.int(_run) for _run in new_list_current_runs]

        # sort them to prepare them for output format
        int_new_list_current_runs.sort()
        self.int_list_current_runs = int_new_list_current_runs

        if int_new_list_current_runs == []:
            self.str_list_current_runs = &amp;quot;&amp;quot;
            return

        # create output string format

        # only 1 run
        if len(int_new_list_current_runs) == 1:
            self.str_list_current_runs = str(int_new_list_current_runs[0])
            return

        # more than 1 run

        # create full matching list
        def match_list(reference_list=[], our_list=[]):
            _index = 0
            _ref_list_and_our_list = zip(our_list, reference_list)
            for _ref_run, _our_run in _ref_list_and_our_list:
                if _ref_run == _our_run:
                    _index += 1
                    continue
                break

            return _index

        _index = 0
        _groups = []
        _our_list = self.int_list_current_runs[_index: ]
        _list_full_reference = np.arange(_our_list[0], _our_list[-1]+1)

        print(&amp;quot;new list: {}&amp;quot;.format(_our_list))

        while _our_list:

            _ref_index = match_list(reference_list=_list_full_reference,
                                    our_list=_our_list)

            _group = [_our_list[0], _our_list[_ref_index-1]]
            # print(&amp;quot;_group: {}&amp;quot;.format(_group))
            _groups.append(_group)

            _our_list = _our_list[_ref_index:]
            if len(_our_list) == 1:
                _groups.append(_our_list)
                break

            if len(_our_list) == 0:
                break

            _list_full_reference = np.arange(_our_list[0], _our_list[-1]+1)

        print(&amp;quot;_groups: {}&amp;quot;.format(_groups))

        list_runs = []
        for _group in _groups:

            if len(_group) == 2:
                [_left_value, _right_value] = _group

                if _left_value == _right_value:
                    list_runs.append(str(_left_value))
                elif _right_value == (_left_value + 1):
                    list_runs.append(str(_left_value))
                    list_runs.append(str(_right_value))
                else:
                    list_runs.append(&amp;quot;{}:{}&amp;quot;.format(_left_value, _right_value))

            else:
                list_runs.append(str(_group[0]))

        str_runs = &amp;quot;,&amp;quot;.join(list_runs)
        print(str_runs)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the implementation of this tool in a notebook.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/list_of_int_parser/live_demo.gif&#39; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to format the notebook widgets</title>
      <link>/post/how_to_format_widget_in_notebook/</link>
      <pubDate>Mon, 05 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/how_to_format_widget_in_notebook/</guid>
      <description>&lt;p&gt;When working with widgets inside a notebook, the default style looks like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/how_to_format_widget_in_notebook/default_style.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;In order to change its style, it&amp;rsquo;s possible to modify the CSS style sheet as followed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from IPython.core.display import HTML
HTML(&amp;quot;&amp;quot;&amp;quot;
&amp;lt;style&amp;gt;
.mytext &amp;gt; .widget-label {
    font-style: strong;
    color: black;
    font-size: 30px;
}
.mytext &amp;gt; input[type=&amp;quot;text&amp;quot;] {
    font-size: 20px;
    color: green;
}
&amp;lt;/style&amp;gt;
&amp;quot;&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this will give a new style as shown here&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/img/posts/how_to_format_widget_in_notebook/customized_style.png&#39; /&gt;&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Thanks to Kynan for &lt;a href=&#34;https://stackoverflow.com/questions/32156248/how-do-i-set-custom-css-for-my-ipython-ihaskell-jupyter-notebook&#34; target=&#34;_blank&#34;&gt;the following post&lt;/a&gt;
 who helped me figuring out the solution&lt;/p&gt;

&lt;/div&gt;

</description>
    </item>
    
  </channel>
</rss>
