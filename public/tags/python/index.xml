<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Jean Bilheux</title>
    <link>/tags/python/</link>
    <description>Recent content in python on Jean Bilheux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 21 Nov 2018 00:00:00 -0500</lastBuildDate>
    
	<atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Add an icon inside a QLabel via QDesigner</title>
      <link>/post/how_to_add_icon_in_qlabel/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/how_to_add_icon_in_qlabel/</guid>
      <description>There are many ways to add images or icons on top of buttons or label. Usually the most painful part is locating the file in the program and managing the location of those images. QDesigner comes with a resource browser that facilitates this storage. The way I&amp;rsquo;m doing it may look strange (and redundant sometimes) but at least it works for me so I will stick to it, until I see a better way.</description>
    </item>
    
    <item>
      <title>Python logging module 1.0.1</title>
      <link>/post/python_logging/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/python_logging/</guid>
      <description>This tutorial is a short version of the following full tutorial
Quick Demo First, we need to import the library to be able to use it
import logging  Then to use it
import logging logging.debug(&#39;This is a debug message&#39;) logging.info(&#39;This is an info message&#39;) logging.warning(&#39;This is a warning message&#39;) logging.error(&#39;This is an error message&#39;) logging.critical(&#39;This is a critical message&#39;) def test_me(): logging.debug(&#39;This is a debug message&#39;) logging.info(&#39;This is an info message&#39;) logging.</description>
    </item>
    
    <item>
      <title>Multi rows table (QTableWidget)and Qtree interacting together</title>
      <link>/post/table_tree_prototype/</link>
      <pubDate>Tue, 06 Nov 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/table_tree_prototype/</guid>
      <description>For one of my projects, I needed to answer the following requirements:
 table with 3 rows of labels (each row of label is a submenu of the row above) resizing any of the column will resize accordingly the other rows scroll of any of the label rows will scroll the other labels tree on the size will allow to hide/show any of the column hidding any of the tree should automatically hide the leaves under it if hidding all the leaves of a branch, automatically hide the branch parent user should have the option to save and reload a configuration full reset of table is available user can remove configurations he created  Because QTableWidget does not allow several rows of label, I had to built this feature from scratch.</description>
    </item>
    
    <item>
      <title>Right Click Menu in QTable</title>
      <link>/post/right_click_menu_in_pyqt_table/</link>
      <pubDate>Thu, 01 Nov 2018 00:00:00 -0400</pubDate>
      
      <guid>/post/right_click_menu_in_pyqt_table/</guid>
      <description>How to get a right click menu from a QTable in PyQt
To be able to have a right click menu in a QTable (PyQt), you need to follow the following few steps
Turn on Custom Context Menu In QtDesigner, and in the property editor select in the contextMenuPolicy the option CustomContextMenu.
Connect Custom Context Menu Signal Catch Signal in Main Code ... def h3_table_right_click(self, position): o_h3_table = H3TableHandler(parent=self) o_h3_table.</description>
    </item>
    
    <item>
      <title>Python Tricks</title>
      <link>/post/python_tricks/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>/post/python_tricks/</guid>
      <description> Locate absolute home folder on all OS from os.path import expanduser print(expanduser(&amp;quot;~&amp;quot;))  On Windows
&#39;C:\\Users\\j35`  On Mac
&#39;/Users/j35&#39;  </description>
    </item>
    
    <item>
      <title>How to automatically plural words in Python</title>
      <link>/post/inflect_python_library/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>/post/inflect_python_library/</guid>
      <description>inflect correctly generate plurals, singular nouns, ordinals, indefinite articles; convert numbers to words.parameters
Installation This library can be installed via pip
&amp;gt; pip install inflect  and the full documentation of this library can be found here
How Does it Work? When do we need this tool
print(&amp;quot;You want to see {} variable&amp;quot;.format(user_variable))  No matter the value of user_variable, the output will always be something like
You want to see X variable  Problem here!</description>
    </item>
    
    <item>
      <title>Launching PyQt from script</title>
      <link>/post/start_pyqt_ui_from_script_itself/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>/post/start_pyqt_ui_from_script_itself/</guid>
      <description>I designed the very simple following UI using QtDesigner and called it main_window.ui. I placed it in the ui_template folder.
Here is what the structure of my project looks like.
I have my own script that buitl automatically the python version of the template
setup.py
import os class UiBuilder(object): pyuic = &#39;&#39; def __init__(self, ui_name=&#39;&#39;): self.define_pyuic_to_run() self.ui_name = os.path.abspath(&#39;ui_template/&#39; + ui_name) [base, ext] = os.path.splitext(ui_name) py_name = base + &#39;.py&#39; self.</description>
    </item>
    
    <item>
      <title>How python Class properties work</title>
      <link>/post/python_class_properties/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 -0400</pubDate>
      
      <guid>/post/python_class_properties/</guid>
      <description>Using this tutorial I came up with this post that summarize what I need to remember about python classes properties.
Class Properties are very useful in the way that they can check automatically the format of a parameter passed in can customize, or calculate on the fly, a parameter requested.
Here I define a first parent class
class FlyingHours: def __init__(self, owner, starting_hours=0): self.owner = owner.title() # first character is upper case self.</description>
    </item>
    
    <item>
      <title>How to customize QPushButton Icons</title>
      <link>/post/icon_qpushbutton/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 -0400</pubDate>
      
      <guid>/post/icon_qpushbutton/</guid>
      <description>For one of my project I had to display a customized push button. I found a couple of ways to do this.
The goal is to display the following icon inside a QPushButton.
Using QtGui.QIcon Let&amp;rsquo;s pretend our image is at /Users/j35/Desktop/button_rotation_left.png
_icon = QtGui.QIcon(&amp;quot;/Users/j35/Desktop/button_rotation_left.png&amp;quot;) my_button = QtGui.QPushButton() my_button.setIcon(_icon) my_button.setIconSize(QtCore.QSize(50, 300))  The problem of using this way, is that the button looses its push button feature that changes the look of the button when the user click it.</description>
    </item>
    
    <item>
      <title>Gamma Filtering</title>
      <link>/post/gamma_filtering_method/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/gamma_filtering_method/</guid>
      <description>Introduction When working with neutorn imaging files, one of the first thing we need to do is removing the gamma spots. Those spots are pixel that recorded gammas strikes, not neutrons strikes.
To do so, we are going to use the convolve library from scipy.
Initialize Fake Data Set import numpy as np from scipy.ndimage import convolve # let&#39;s create a 10x10 random array of values between 0 and 1 my_array = np.</description>
    </item>
    
    <item>
      <title>How to create a python library using conda</title>
      <link>/post/create_conda_python_library/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/create_conda_python_library/</guid>
      <description>The goal of this post will be show you the minimum requirements to build a conda library.
The starting project will be a library I have been working on called NeuNorm.
First thing, create a folder conda-recipes that will contain the files necessary to build the library.
In this folder, I created 2 files
conda_build_config.yaml
python: - 2.7 - 3.5 - 3.6  and
meta.yaml
{% set version = &amp;quot;1.3.16&amp;quot; %} {% set git_rev = &amp;quot;1.</description>
    </item>
    
    <item>
      <title>Keep Pan and Zoom of ImageView When Displaying New Image</title>
      <link>/post/pyqtgraph_states/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/pyqtgraph_states/</guid>
      <description>The ImageViewer of pyqtgraph is amazing but comes with an annoying feature, the reset of the pan and zoom if you display a new image (as shown here)
A couple of lines of codes need to be added in order to preserve those settings when switching image. Looks like nothing but it took me a couple of hours to figure it out so here it is with code before and after</description>
    </item>
    
    <item>
      <title>Working with the histogram widget of pyqtgraph</title>
      <link>/post/pyqtgraph_histogram/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/pyqtgraph_histogram/</guid>
      <description>The histogram tool on the side of the image coming for free with pyqtgraph is amazing. You can change or move the range but any refresh of the image reset the settings defined. Here is how you can fix those settings.
My main challenge has been to recover the id of the histogram when not initializing this one myself. And here is the way
class MyPyqt(QMainWindow): histogram_level = [] def __init__(self): self.</description>
    </item>
    
    <item>
      <title>How to format the notebook widgets</title>
      <link>/post/how_to_format_widget_in_notebook/</link>
      <pubDate>Mon, 05 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/how_to_format_widget_in_notebook/</guid>
      <description>When working with widgets inside a notebook, the default style looks like this
In order to change its style, it&amp;rsquo;s possible to modify the CSS style sheet as followed
from IPython.core.display import HTML HTML(&amp;quot;&amp;quot;&amp;quot; &amp;lt;style&amp;gt; .mytext &amp;gt; .widget-label { font-style: strong; color: black; font-size: 30px; } .mytext &amp;gt; input[type=&amp;quot;text&amp;quot;] { font-size: 20px; color: green; } &amp;lt;/style&amp;gt; &amp;quot;&amp;quot;&amp;quot;)  And this will give a new style as shown here
Thanks to Kynan for the following post who helped me figuring out the solution</description>
    </item>
    
    <item>
      <title>How to lock all the signals of a widget</title>
      <link>/post/pyqt_block_signals/</link>
      <pubDate>Fri, 12 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/pyqt_block_signals/</guid>
      <description>I had to work on a project where the modification of any cell of a big table had to trigger an event. But there were cases where I had to repopulate the entire table. The problem of doing so is that each cell will then trigger the event.
The solution is very simple. All you need is to block all the signals before updating the table (for example) and then unlock the signals once it&amp;rsquo;s done.</description>
    </item>
    
    <item>
      <title>Automatically convert notebooks into html page for documentation using sphinx</title>
      <link>/post/convert_notebooks_to_html_pages/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/convert_notebooks_to_html_pages/</guid>
      <description>I&amp;rsquo;m going to show you here how you can easily create an HTML document from a notebook.
1 - First thing you need is make sure your notebook has a title
# this is my title  Then, make sure that all the other headings of the notebooks have a lower hierarchy.
2 - Then you will need to import the following python libraries
&amp;gt; pip install sphinx &amp;gt; pip install nbconvert &amp;gt; pip install pandoc &amp;gt; pip install latex &amp;gt; pip install nbsphinx  Somehow, I had to use conda for the pandoc library to work.</description>
    </item>
    
    <item>
      <title>Create a Target type tool in matplotlib</title>
      <link>/post/target_tool_in_matplotlib/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/target_tool_in_matplotlib/</guid>
      <description>In one of my project, I had to select, for various images, the best center of a circular object. I came up with the following solution that, when used with the jupyter notebooks widgets, helps finding the best center of the object.
Here is such an image where we need to find the center. In this case, it&amp;rsquo;s pretty obvious, but in real cases it&amp;rsquo;s much more complicated so this tool should really help.</description>
    </item>
    
    <item>
      <title>Getting started with PyQt applications</title>
      <link>/post/getting_started_with_pyqt_applications/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/getting_started_with_pyqt_applications/</guid>
      <description>Getting started with a PyQt application is alwawys intimidating. We always have a few important questions when starting such a project:
 what tools do I need? PyQt, python, Qt Designer&amp;hellip;etc. how should I structure my project how to compile it?  Here is a step by step instructions that shows you how to get started. I&amp;rsquo;m not telling you this is the right way (if there is any) or even the best way to do it, but I know this way works for me, so here it is.</description>
    </item>
    
    <item>
      <title>How to create a DOI linked to any python library</title>
      <link>/post/create_doi/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/create_doi/</guid>
      <description>The best way to reference work done by others is by using their DOI (Digital Object Identifier). This is easy for paper publication but not as easy for software, until now. Thanks to zenodo.
Here are the steps to create a DOI for your python library
Step 1 - Create an account on zenodo Step 2 - Link your application In this example, I&amp;rsquo;m using my github account. By doing so, I am able to automatically see all my github repository by clicking the GitHub button in the menu, on the left side of the zenodo web page.</description>
    </item>
    
    <item>
      <title>How to create a python library using pip</title>
      <link>/post/create_pip_python_library/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/create_pip_python_library/</guid>
      <description>I have been working on a small project that allows to calculate the radial profile of an image for a given angular range. We are not interested in this post about the functionality of the library itself, but in case you are curious, here is where you can find the source code SectorizedRadialProfile.
I, first, ned to mention that the code is fully documented using sphinx and fully unit tested using pytest.</description>
    </item>
    
    <item>
      <title>Use of local file in unit test</title>
      <link>/post/call_local_file_in_unit_test/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/call_local_file_in_unit_test/</guid>
      <description>I had some issue in one of my project when running my unit test from the command line and from my IDE. I could never have both happy at the same time. This was related to the way I was calling local file used in my unit tests.
Using the command line, I had to refer to the file using relative path, but the IDE was looking for full path (which is obviously wrong).</description>
    </item>
    
    <item>
      <title>Bragg Edge User Interface (iBeatles)</title>
      <link>/project/ibeatles/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/ibeatles/</guid>
      <description>Several wavelength-dependent proof-of-concept imaging measurements have been performed at the Spallation Neutron Source (SNS) VULCAN and SNAP beam lines. This effort is focused on prototyping imaging software for the future SNS VENUS imaging beam line. One of the time- of-flight (TOF) techniques that is of interest to the scientific community is the 2-dimensional mapping of phases and average crystalline plane orientation in samples ex-situ, but also during applied stresses such as tensile loading and heating.</description>
    </item>
    
    <item>
      <title>How to add a title to a matplotlib figure inside a notebook</title>
      <link>/post/how_to_add_title_to_matplotlib_figure/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/how_to_add_title_to_matplotlib_figure/</guid>
      <description>By default, matplotlib only provides an increment index to the figure title as shown here
_file_name = _files[index] fig, (ax0, ax1) = plt.subplots(ncols=2, figsize=(10,5)) #plt.title(os.path.basename(_files[index])) cax0 = ax0.imshow(_data[index], cmap=&#39;viridis&#39;, interpolation=None) ax0.set_title(&amp;quot;Before Correction&amp;quot;) _ = fig.colorbar(cax0, ax=ax0) # colorbar cax1 = ax1.imshow(_clean_data[index], cmap=&#39;viridis&#39;, interpolation=None) ax1.set_title(&amp;quot;After Correction&amp;quot;) _ = fig.colorbar(cax1, ax=ax1) # colorbar fig.tight_layout()  In order to provide a title to this plot, simply add a value to the flag num in plt.</description>
    </item>
    
    <item>
      <title>How to trigger only 1 notebook widget dropdown event</title>
      <link>/post/how_to_trigger_single_notebook_widget_event/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/how_to_trigger_single_notebook_widget_event/</guid>
      <description>I’m working on a notebook that is supposed to clean images. Nothing fancy here, just replacing the negative, inf and NaN values by either 0 or NaN.
This can be done interactively using the following widgets.
But my problem is that each time a selection inside one of the dropdown widgets is changed, it triggers 5 events. So I added the following snipet of code to cheat the system and only work with the first event triggered.</description>
    </item>
    
    <item>
      <title>How to turn off warnings in the notebooks</title>
      <link>/post/how_to_remove_notebook_warning/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/how_to_remove_notebook_warning/</guid>
      <description>If you are annoyed by warning messages (see top picture), Just add the following command at the top of your notebook
import warnings warnings.filterwarnings(‘ignore’)  </description>
    </item>
    
    <item>
      <title>What my .gitignore file looks like</title>
      <link>/post/my_gitignore_file/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/my_gitignore_file/</guid>
      <description>When working with notebooks and python projects, here is what my .gitignore file looks like.
__pycache__ *.py[cod] .ipynb* .coverage /cover/* # mac .DS_Store .cache # Packages *.egg *.egg-info dist build eggs parts bin var sdist MANIFEST # Unit test / coverage reports .coverage  </description>
    </item>
    
    <item>
      <title>pytest trick to run script before and after each test</title>
      <link>/post/pytest_trick/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/pytest_trick/</guid>
      <description>I recently had to write a set of unit test that required some code to be executed before* and after each test. I found a few post that listed the wrong method name so here is how I did it.
import unittest def setUp(self): _file_path = os.path.dirname(__file__) self.data_path = os.path.abspath(os.path.join(_file_path, &#39;../data/&#39;)) self.export_folder = self.data_path + &#39;/temporary_folder/&#39; os.mkdir(self.export_folder) def tearDown(self): shutil.rmtree(self.export_folder) def test_export_create_the_right_file_name(self): &#39;&#39;&#39;assert export works for all data types for tif output&#39;&#39;&#39; sample_path = self.</description>
    </item>
    
    <item>
      <title>Jupyter notebooks</title>
      <link>/project/jupyter_notebooks/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/jupyter_notebooks/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>